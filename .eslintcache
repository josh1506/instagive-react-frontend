[{"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\index.jsx":"1","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\configStore.js":"2","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\App.jsx":"3","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\reducer.js":"4","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\accounts.js":"5","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\postList.js":"6","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\auth.js":"7","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Nav.jsx":"8","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\LandingPage.jsx":"9","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\NotFound.jsx":"10","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\EmailLoginPage.jsx":"11","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\AllPostList.jsx":"12","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\AuthPage.jsx":"13","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPage.jsx":"14","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\UserPage.jsx":"15","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPage.jsx":"16","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\user.js":"17","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\route\\instagive.js":"18","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Footer.jsx":"19","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\ShowContent.jsx":"20","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Posts.jsx":"21","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Content.jsx":"22","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Login.jsx":"23","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Register.jsx":"24","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\ForgotPass.jsx":"25","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsUpdatePage.jsx":"26","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPageContent.jsx":"27","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\PostList.jsx":"28","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPost.jsx":"29","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLedgers.jsx":"30","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLogin.jsx":"31","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminRejected.jsx":"32","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminAccepted.jsx":"33","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPending.jsx":"34","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Sidebar.jsx":"35","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerPage.jsx":"36","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\UserPostDetails.jsx":"37","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\changePassPage\\ChangePass.jsx":"38","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreate.jsx":"39","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\UpdateUserPost.jsx":"40","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\PostCard.jsx":"41","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\others\\cityLocation.js":"42","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostDetailUpdate.jsx":"43","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostCreateUpdate.jsx":"44","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreateDetails.jsx":"45","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerCreate.jsx":"46","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\SideBarDonor.jsx":"47","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerList.jsx":"48"},{"size":418,"mtime":1615127977598,"results":"49","hashOfConfig":"50"},{"size":181,"mtime":1615043413061,"results":"51","hashOfConfig":"50"},{"size":2408,"mtime":1619327909790,"results":"52","hashOfConfig":"50"},{"size":252,"mtime":1615043413063,"results":"53","hashOfConfig":"50"},{"size":1819,"mtime":1615043413060,"results":"54","hashOfConfig":"50"},{"size":1315,"mtime":1615043413062,"results":"55","hashOfConfig":"50"},{"size":950,"mtime":1615043413060,"results":"56","hashOfConfig":"50"},{"size":5212,"mtime":1618764572967,"results":"57","hashOfConfig":"50"},{"size":571,"mtime":1620252194436,"results":"58","hashOfConfig":"50"},{"size":385,"mtime":1615043413065,"results":"59","hashOfConfig":"50"},{"size":547,"mtime":1616336205630,"results":"60","hashOfConfig":"50"},{"size":3889,"mtime":1618068845734,"results":"61","hashOfConfig":"50"},{"size":1404,"mtime":1615043413072,"results":"62","hashOfConfig":"50"},{"size":1577,"mtime":1618253433679,"results":"63","hashOfConfig":"50"},{"size":1658,"mtime":1615273999592,"results":"64","hashOfConfig":"50"},{"size":2511,"mtime":1616337210552,"results":"65","hashOfConfig":"50"},{"size":4173,"mtime":1618753305549,"results":"66","hashOfConfig":"50"},{"size":118,"mtime":1618133184555,"results":"67","hashOfConfig":"50"},{"size":1563,"mtime":1620252194422,"results":"68","hashOfConfig":"50"},{"size":1203,"mtime":1618014772696,"results":"69","hashOfConfig":"50"},{"size":901,"mtime":1619012893049,"results":"70","hashOfConfig":"50"},{"size":8102,"mtime":1620252194430,"results":"71","hashOfConfig":"50"},{"size":3589,"mtime":1615364850871,"results":"72","hashOfConfig":"50"},{"size":23457,"mtime":1620814018006,"results":"73","hashOfConfig":"50"},{"size":2985,"mtime":1618133184510,"results":"74","hashOfConfig":"50"},{"size":1712,"mtime":1618254607357,"results":"75","hashOfConfig":"50"},{"size":1812,"mtime":1619009340487,"results":"76","hashOfConfig":"50"},{"size":11452,"mtime":1618133184596,"results":"77","hashOfConfig":"50"},{"size":15654,"mtime":1619010348078,"results":"78","hashOfConfig":"50"},{"size":8820,"mtime":1618764572978,"results":"79","hashOfConfig":"50"},{"size":2500,"mtime":1618133184503,"results":"80","hashOfConfig":"50"},{"size":1526,"mtime":1615043413072,"results":"81","hashOfConfig":"50"},{"size":3054,"mtime":1615043413070,"results":"82","hashOfConfig":"50"},{"size":3056,"mtime":1615043413071,"results":"83","hashOfConfig":"50"},{"size":508,"mtime":1615043413066,"results":"84","hashOfConfig":"50"},{"size":534,"mtime":1615043413084,"results":"85","hashOfConfig":"50"},{"size":8836,"mtime":1619009296880,"results":"86","hashOfConfig":"50"},{"size":4285,"mtime":1618133184536,"results":"87","hashOfConfig":"50"},{"size":504,"mtime":1615043413085,"results":"88","hashOfConfig":"50"},{"size":544,"mtime":1615043413088,"results":"89","hashOfConfig":"50"},{"size":3135,"mtime":1618068808341,"results":"90","hashOfConfig":"50"},{"size":418,"mtime":1615043413069,"results":"91","hashOfConfig":"50"},{"size":6517,"mtime":1618254414666,"results":"92","hashOfConfig":"50"},{"size":455,"mtime":1615043413087,"results":"93","hashOfConfig":"50"},{"size":8502,"mtime":1619369747643,"results":"94","hashOfConfig":"50"},{"size":4755,"mtime":1615192601748,"results":"95","hashOfConfig":"50"},{"size":11051,"mtime":1619715249909,"results":"96","hashOfConfig":"50"},{"size":23925,"mtime":1619717322060,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"w933ur",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"100"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"100"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"100"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"100"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"100"},"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\index.jsx",[],["222","223"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\configStore.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\App.jsx",["224","225"],"import React, { useEffect, useState } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { postListFeched } from './app/postList'\r\nimport { accountFetched } from './app/accounts'\r\nimport { authAdd } from './app/auth'\r\nimport Nav from './components/common/Nav';\r\n\r\nimport LandingPage from './components/pages/landingPage/LandingPage';\r\nimport DetailsPage from './components/pages/detailsPage/DetailsPage';\r\nimport AuthPage from './components/pages/authPage/AuthPage';\r\nimport UserPage from './components/pages/userPage/UserPage';\r\nimport AdminPage from './components/pages/adminPage/AdminPage';\r\nimport NotFound from './components/common/NotFound';\r\nimport './App.css';\r\nimport AllPostList from './components/pages/landingPage/AllPostList';\r\nimport EmailLoginPage from './components/pages/EmailLoginPage';\r\nimport MessengerCustomerChat from 'react-messenger-customer-chat';\r\n\r\n\r\nfunction App(props) {\r\n\r\n  useEffect(() => {\r\n    const getAllData = async () => {\r\n      props.accountFetched()\r\n      props.postListFeched()\r\n    };\r\n\r\n    const validateAuthID = async () => {\r\n      // Validating if token is valid\r\n      // await axios.post('/checkusertoken', token)\r\n\r\n      props.authAdd(token, type)\r\n    }\r\n\r\n    // check if there's a user in local storage\r\n    const token = localStorage.getItem('user') || localStorage.getItem('admin')\r\n    const type = localStorage.key(token)\r\n\r\n    validateAuthID()\r\n    getAllData();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Nav />\r\n      <Switch>\r\n        <Route path='/login/email/:token' component={EmailLoginPage} />\r\n        <Route path='/post-list' component={AllPostList} />\r\n        <Route path='/details/:id' component={DetailsPage} />\r\n        <Route path='/auth' component={AuthPage} />\r\n        <Route path='/user' component={UserPage} />\r\n        <Route path='/not-found' component={NotFound} />\r\n        <Route path='/admin' component={AdminPage} />\r\n        <Route path='/' exact component={LandingPage} />\r\n        <Redirect to='/not-found' />\r\n      </Switch>\r\n   \r\n      <MessengerCustomerChat\r\n        pageId='114092927169420'\r\n        appId='697765701142285'\r\n      />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { state }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n  { authAdd, postListFeched, accountFetched })(App);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\reducer.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\accounts.js",["226"],"import route from '../route/instagive'\r\n\r\n// Action Type\r\nconst ACCOUNT_FETCHED = 'accountFetched'\r\nconst ACCOUNT_APPROVED = 'accountApproved'\r\nconst ACCOUNT_REJECTED = 'accountRejected'\r\n\r\n\r\n// Actions\r\nconst accountFetched = () => async dispatch => {\r\n    const {data} = await route.get('/admin/getusers')\r\n\r\n    dispatch({\r\n        type:ACCOUNT_FETCHED,\r\n        payload: data\r\n    })\r\n}\r\n\r\nconst accountApproved = account => async dispatch => {\r\n    await route.post(`/admin/changestatus/${account._id}/approved`)\r\n    dispatch({\r\n        type:ACCOUNT_APPROVED,\r\n        payload: account\r\n    })\r\n}\r\n\r\nconst accountRejected = account => async dispatch => {\r\n    await route.post(`/admin/changestatus/${account._id}/rejected`)\r\n    dispatch({\r\n        type:ACCOUNT_REJECTED,\r\n        payload: account\r\n    })\r\n}\r\n\r\n\r\nconst accountList = {\r\n    pending: [],\r\n    approved: [],\r\n    rejected: []\r\n}\r\n// Reducer\r\nexport default (state=accountList, action) => {\r\n    switch (action.type) {\r\n        case ACCOUNT_FETCHED:\r\n            return action.payload\r\n    \r\n        case ACCOUNT_APPROVED:\r\n            return {\r\n                ...state,\r\n                pending: state.pending.filter(account => account._id !== action.payload._id),\r\n                approved: [...state.approved, action.payload]\r\n            }\r\n        \r\n        case ACCOUNT_REJECTED:\r\n            return {\r\n                ...state,\r\n                pending: state.pending.filter(account => account._id !== action.payload._id),\r\n                approved: state.approved.filter(account => account._id !== action.payload._id),\r\n                rejected: [...state.approved, action.payload]\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {\r\n    accountFetched,\r\n    accountApproved,\r\n    accountRejected\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\postList.js",["227","228","229","230"],"import route from '../route/instagive'\r\n\r\n// Action Type\r\nconst POST_LIST_FECHED = 'postListFeched'\r\nconst POST_LIST_ADDED = 'postListAdded'\r\nconst POST_LIST_REMOVED = 'postListRemoved'\r\nconst POST_LIST_UPDATED = 'postListUpdated'\r\n\r\n\r\n// Action\r\nexport const postListFeched = () => async dispatch => {\r\n    const {data} = await route.get('/landing')\r\n    dispatch({\r\n        type: POST_LIST_FECHED,\r\n        payload: data\r\n    })\r\n}\r\n\r\nconst postListAdded = (post) => {\r\n    return {\r\n        type: POST_LIST_ADDED,\r\n        payload: post\r\n    }\r\n}\r\n\r\nconst postListRemoved = (id) => {\r\n    return {\r\n        type: POST_LIST_REMOVED,\r\n        payload: {id}\r\n    }\r\n}\r\n\r\nconst postListUpdated = (post) => {\r\n    return {\r\n        type: POST_LIST_UPDATED,\r\n        payload: post\r\n    }\r\n}\r\n\r\n\r\n\r\n// Reducer\r\nexport default (state=[], action) => {\r\n    switch (action.type) {\r\n        case POST_LIST_FECHED:\r\n            return action.payload\r\n    \r\n        case POST_LIST_REMOVED:\r\n            return state.filter(post => \r\n                post._id !== action.payload.id)\r\n    \r\n        case POST_LIST_UPDATED:\r\n            return state.map(post =>\r\n                post._id === action.payload.id ?\r\n                action.payload :\r\n                post)\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\auth.js",["231"],"// Action Type\r\nconst AUTH_ADDED = 'authAdded'\r\nconst AUTH_REMOVED = 'authRemoved'\r\n\r\n// Actions\r\nconst authAdd = (token, type) => {\r\n    return {\r\n        type: AUTH_ADDED,\r\n        payload: {\r\n            token,\r\n            type\r\n        }\r\n    }\r\n}\r\n\r\nconst authRemove = () => {\r\n    return {\r\n        type: AUTH_REMOVED,\r\n        payload: {\r\n            token: '',\r\n            type: ''\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Data\r\nconst authData = {\r\n    token: '',\r\n    type: ''\r\n}\r\n\r\n\r\n// Reducer\r\nexport default (auth=authData, action) => {\r\n    switch (action.type) {\r\n        case AUTH_ADDED:\r\n            return {\r\n                token: action.payload.token,\r\n                type: action.payload.type\r\n            }\r\n        \r\n        case AUTH_REMOVED:\r\n            return {\r\n                token: '',\r\n                type: ''\r\n            }\r\n\r\n        default:\r\n            return auth\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    authAdd,\r\n    authRemove\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Nav.jsx",["232"],"import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport { authRemove } from '../../app/auth'\r\nimport logo from '../../img/Instagive-logo-2.png'\r\nimport '../../style/common/Nav.css'\r\n\r\nfunction Nav(props) {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navBar\">\r\n            <span style={{display: 'flex'}}>\r\n                <Link to=\"/admin\" className='navLogo'>\r\n                    <img src={logo} alt=\"logo\" height='45px' className='logo' style={{ marginRight: 10 }} />\r\n                </Link>\r\n                    <Link to='/' style={{textDecoration: 'none', display: 'flex', alignItems: 'center'}}>\r\n                        <p className='navLogoName' style={{fontSize: 22, color: '#fff'}}>InstaGive</p>\r\n                    </Link>\r\n                <span>\r\n                    {/* Other nav links */}\r\n                </span>\r\n            </span>\r\n            <span className='navLogin'>\r\n                {props.auth.token ?\r\n                    <span>\r\n                        {props.auth.type === 'user' || localStorage.getItem('user') ?\r\n                            <span>\r\n                                <div>\r\n                                    <IconButton\r\n                                        aria-label=\"account of current user\"\r\n                                        aria-controls=\"menu-appbar\"\r\n                                        aria-haspopup=\"true\"\r\n                                        onClick={handleMenu}\r\n                                        color=\"inherit\"\r\n                                    >\r\n                                        <AccountCircle fontSize='large' />\r\n                                    </IconButton>\r\n                                    <Menu\r\n                                        id=\"menu-appbar\"\r\n                                        anchorEl={anchorEl}\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right',\r\n                                        }}\r\n                                        keepMounted\r\n                                        transformOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right',\r\n                                        }}\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                    >\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user/ledger\" className='navLink'>Ledger</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user\" className='navLink'>Dashboard</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user/change-password\" className='navLink'>ChangePassword</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to='/' className='navLink' onClick={() => {\r\n                                                localStorage.removeItem('user')\r\n                                                localStorage.removeItem('admin')\r\n                                                props.authRemove()\r\n                                            }}>Logout</NavLink>\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </div>\r\n                            </span> :\r\n                            <NavLink to='/' className='navLink' onClick={() => {\r\n                                localStorage.removeItem('user')\r\n                                localStorage.removeItem('admin')\r\n                                props.authRemove()\r\n                            }}>Logout</NavLink>\r\n                        }\r\n                    </span> :\r\n                    <span>\r\n                        <NavLink to=\"/auth/register\" className='navLink'>Signup</NavLink>\r\n                        |\r\n                        <NavLink to=\"/auth/login\" className='navLink'>Login</NavLink>\r\n                    </span>\r\n                }\r\n            </span>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { auth: state.auth }\r\n}\r\n\r\nexport default connect(mapStateToProps, { authRemove })(Nav);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\LandingPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\NotFound.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\EmailLoginPage.jsx",["233","234"],"import React, { useEffect } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { connect } from 'react-redux';\r\nimport { authAdd } from '../../app/auth';\r\n\r\nfunction EmailLoginPage(props) {\r\n  useEffect(() => {\r\n    const token = props.match.params.token\r\n    props.authAdd(token, 'user')\r\n    localStorage.setItem('user', token)\r\n    props.history.push('/')\r\n  }, [])\r\n\r\n  return (\r\n    <div className='postCardContainer'>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(null, { authAdd })(EmailLoginPage);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\AllPostList.jsx",["235","236"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { connect } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction AllPostList(props) {\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            maxWidth: 345,\r\n        },\r\n        media: {\r\n            height: 140,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    if (!props.post)\r\n        return (\r\n            <div className='postCardContainer'>\r\n                <CircularProgress color='inherit' />\r\n            </div>\r\n        );\r\n    return (\r\n        <div className=\"shadow-container\">\r\n            <div className='postFilterContainer'>\r\n            </div>\r\n            <div className='postCardContainer'>\r\n                {props.post.length === 0 ? <h3>There are no post</h3> : props.post.map((post) => (\r\n                    <Card className={`${classes.root} about-us-cards`} style={{ margin: '20px' }}>\r\n                        <CardActionArea>\r\n                            <CardMedia\r\n                                component='img'\r\n                                alt={post.profilePic}\r\n                                height='140'\r\n                                image={`${post.profilePic}`}\r\n                                title={post.profilePic}\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant='h5' component='h2'>\r\n                                    {post.Title.substring(0, 20)}\r\n                                    {post.Title.length > 20 ? '...' : ''}\r\n                                </Typography>\r\n                                <Typography className={classes.pos} color='textSecondary'>\r\n                                    {post.location} |{' '}\r\n                                    {post.donationType === 'both'\r\n                                        ? 'Cash, In-kind'\r\n                                        : post.donationType === 'cash'\r\n                                            ? 'Cash'\r\n                                            : 'In-kind'}\r\n                                </Typography>\r\n                                <Typography variant='body2' color='textSecondary' component='p'>\r\n                                    {post.description.substring(0, 255)}\r\n                                    {post.description.length > 250 ? '...' : ''}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </CardActionArea>\r\n                        <CardActions>\r\n                            <Button\r\n                                size='small'\r\n                                color='primary'\r\n                                onClick={() =>\r\n                                    props.history.push(`/details/${post._id}`)\r\n                                }\r\n                            >\r\n                                Learn More\r\n              </Button>\r\n                        </CardActions>\r\n                    </Card>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { post: state.postList.filter(post => post.status === 'Approved') }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AllPostList);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\AuthPage.jsx",["237","238","239"],"import React, { useEffect, useState } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport ForgotPass from './ForgotPass';\r\nimport '../../../style/authPage/authPage.css'\r\n\r\nfunction AuthPage(props) {\r\n    const [userAuthID, setUserAuthID] = useState()\r\n\r\n    useEffect(() => {\r\n        // check if there's a user in coockies\r\n        const userAuthID = localStorage.getItem('user')\r\n\r\n        const validateAuthID = async () => {\r\n            // Same logic for user login\r\n            if (userAuthID) props.history.replace('/user')\r\n        }\r\n\r\n        validateAuthID()\r\n    }, [])\r\n\r\n    return (\r\n        <div className='auth-container'>\r\n            <div className='authBackgroundImage'>\r\n            </div>\r\n            <div className='authForm'>\r\n                <div className='center'>\r\n                    <Switch>\r\n                        <Route path='/auth/login' component={Login} />\r\n                        <Route path='/auth/register' component={Register} />\r\n                        <Route path='/auth/forgot' component={ForgotPass} />\r\n                        <Redirect from='/auth' to='/auth/login' exact />\r\n                        <Redirect to='/not-found' />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthPage;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\UserPage.jsx",["240"],"import React, { useEffect } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport PostList from './PostList';\r\nimport LedgerPage from './ledgerPage/LedgerPage';\r\nimport PostCreate from './postDetailPage/PostCreate';\r\nimport UserPostDetails from './postDetailPage/UserPostDetails';\r\nimport ChangePass from './changePassPage/ChangePass';\r\nimport UpdateUserPost from './postUpdatePage/UpdateUserPost';\r\nimport { authRemove } from '../../../app/auth'\r\nimport { userDataFetch } from '../../../app/user'\r\n\r\nfunction UserPage(props) {\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('user')) return props.history.push('/auth')\r\n        if (props.auth.token) {\r\n            props.userDataFetch(props.auth.token)\r\n        }\r\n\r\n    }, [props.auth.token])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Switch>\r\n                    <Route path='/user/change-password' component={ChangePass} />\r\n                    <Route path='/user/post-create' component={PostCreate} />\r\n                    <Route path='/user/post-details/:id' component={UserPostDetails} />\r\n                    <Route path='/user/ledger' component={LedgerPage} />\r\n                    <Route path='/user/update-details/:id' component={UpdateUserPost} />\r\n                    <Route path='/user/' exact component={PostList} />\r\n                    <Redirect to='/not-found' />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state\r\n}\r\n\r\nexport default connect(mapStateToProps, { authRemove, userDataFetch })(UserPage);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\user.js",["241","242"],"import route from '../route/instagive'\r\nimport axios from 'axios'\r\n\r\n// Action Types\r\nconst USER_DATA_FETCH = 'userDataFetch'\r\nconst USER_LEDGER_ADDED = 'userLedgerAdded'\r\nconst USER_LEDGER_REMOVED = 'userLedgerRemoved'\r\nconst USER_LEDGER_UPDATED = 'userLedgerUpdated'\r\n\r\nconst USER_LEDGER_ACCEPTED = 'userLedgerAccepted'\r\nconst USER_LEDGER_REJECTED = 'userLedgerRejected'\r\n\r\nconst USER_POST_ADDED = 'userPostAdded'\r\nconst USER_POST_REMOVED = 'userPostRemoved'\r\nconst USER_POST_UPDATED = 'userPostUpdated'\r\n\r\n\r\n// Action\r\n// Ledger\r\nconst userDataFetch = (token) => async dispatch => {\r\n    const { data: ledger } = await route.post('/ledger/getall', {token})\r\n    const { data: post } = await route.post('/post/userpost', { token })\r\n\r\n    dispatch({\r\n        type: USER_DATA_FETCH,\r\n        payload: {ledger, post} \r\n    })\r\n}\r\n\r\n\r\nconst userLedgerAccepted = (postID) => async dispatch => {\r\n    dispatch({\r\n        type: USER_LEDGER_ACCEPTED,\r\n        payload: {_id: postID}\r\n    })\r\n}\r\nconst userLedgerRejected = (postID) => async dispatch => {\r\n    dispatch({\r\n        type: USER_LEDGER_REJECTED,\r\n        payload: {_id: postID}\r\n    })\r\n}\r\n\r\nconst userLedgerAdded = (ledgerForm, token) => async dispatch => {\r\n    await axios.post(`https://instagive-backend.herokuapp.com/ledger/${ledgerForm.postId}`, { ...ledgerForm, token })\r\n    let newForm = {...ledgerForm}\r\n    if (!ledgerForm.donorName) newForm = {...newForm, donorName: 'Anonymous'}\r\n    if (!ledgerForm.email) newForm = {...newForm, email: 'None'}\r\n\r\n    dispatch({\r\n        type: USER_LEDGER_ADDED,\r\n        payload: newForm\r\n    })\r\n\r\n\r\n    document.location.reload();\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\n// Post\r\nconst userPostAdded = (formdata) => async dispatch => {\r\n    // await route.post('/post/createpost', formdata)\r\n    console.log(...formdata);\r\n    dispatch({\r\n        type: USER_POST_ADDED,\r\n        payload: formdata\r\n    })\r\n}\r\nconst userPostRemoved = () => async dispatch => {\r\n    // await route.post()\r\n\r\n    dispatch({\r\n        type: USER_POST_REMOVED,\r\n        payload: {\r\n\r\n        }\r\n    })\r\n}\r\nconst userPostUpdated = (postForm, postID, userToken) => async dispatch => {\r\n    await route.put(`/post/edit/${postID}`, { ...postForm, token: userToken })\r\n    dispatch({\r\n        type: USER_POST_UPDATED,\r\n        payload: {\r\n            _id: postID,\r\n            ...postForm\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Data\r\nconst userData = {\r\n    ledger: [],\r\n    post: []\r\n}\r\n\r\n\r\n// Reducer\r\nexport default (state=userData, action) => {\r\n    switch (action.type) {\r\n        case USER_DATA_FETCH:\r\n            return action.payload\r\n    \r\n        case USER_LEDGER_ADDED:\r\n            return {...state, ledger: [...state.ledger, action.payload]}\r\n    \r\n        case USER_LEDGER_REMOVED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.filter(ledger => ledger._id !== action.payload._id)\r\n            }\r\n    \r\n        case USER_LEDGER_ACCEPTED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.map(ledger => ledger._id === action.payload._id ? {...ledger, status: 'Approved'} : ledger)\r\n            }\r\n    \r\n        case USER_LEDGER_REJECTED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.map(ledger => ledger._id === action.payload._id ? {...ledger, status: 'Rejected'} : ledger)\r\n            }\r\n    \r\n    \r\n        case USER_LEDGER_UPDATED:\r\n            return state\r\n    \r\n        case USER_POST_ADDED:\r\n            return {...state, post: [...state.post, action.payload]}\r\n    \r\n        case USER_POST_REMOVED:\r\n            return {\r\n                ...state,\r\n                post: state.post.filter(post => post._id !== action.payload._id)\r\n            }\r\n    \r\n        case USER_POST_UPDATED:\r\n            return {\r\n                ...state,\r\n                post: state.post.map(post => post._id === action.payload._id ? {...post, ...action.payload} : post)\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    userDataFetch,\r\n    userLedgerAdded,\r\n\r\n    userPostUpdated,\r\n    userPostAdded,\r\n    \r\n    userLedgerAccepted,\r\n    userLedgerRejected\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\route\\instagive.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Footer.jsx",["243","244","245","246","247"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\ShowContent.jsx",["248"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport '../../../style/landingPage/showContent.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction ShowContent(props) {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div id='showcase'>\r\n      <div className='container showcase-container'>\r\n        <div style={{position: 'relative', top: '230px', zIndex: '2'}}>\r\n        <h1 style={{color: 'white'}}>Welcome to InstaGive</h1>\r\n        <p>\r\n          Online donation platform for the residence of Pampanga\r\n        </p>\r\n        <Button\r\n        classes\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          style={{ opacity: 0.9 }}\r\n          color=\"primary\" className={classes.margin}\r\n          onClick={() => props.history.push('/post-list')}>\r\n          Browse Donations\r\n        </Button>\r\n          </div>\r\n       \r\n        \r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShowContent;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Posts.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Content.jsx",["249","250","251","252","253","254"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Login.jsx",["255","256","257"],"import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { authAdd } from '../../../app/auth'\r\nimport route from '../../../route/instagive'\r\nimport '../../../style/authPage/login.css';\r\n\r\nimport {TextField, Button, Snackbar} from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nfunction Login(props) {\r\n  const [auth, setAuth] = useState({ username: '', password: '' });\r\n  const [error, setError] = useState({\r\n\r\n    valid: false,\r\n    msg: '',\r\n    severity: ''\r\n\r\n  });\r\n  \r\n\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { data } = await route.post('/user/login', auth);\r\n\r\n    if (data.valid !== true) {\r\n    \r\n      if(data.valid === 'Credentials Error') \r\n      setError({valid: true, msg: data.valid, severity: 'warning' })\r\n      else  setError({valid: true, msg: data.valid, severity: 'info' })\r\n\r\n\r\n    } else {\r\n      // Set Item\r\n      localStorage.setItem('user', data.token)\r\n      props.authAdd(data.token, 'user')\r\n      props.history.push('/user')\r\n\r\n    }\r\n\r\n    // If there is error in auth, set the error to TRUE\r\n    setAuth({username: '', password: ''})\r\n  };\r\n\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return; \r\n    }\r\n\r\n    setError({...error, valid: false});\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n\r\n\r\n    <div className='LoginContainer'>\r\n   \r\n    \r\n   <Snackbar open={error.valid} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={error.severity}>\r\n         {error.msg}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n      <div>\r\n        <h1 className='authTitle'>Welcome!</h1>\r\n\r\n\r\n\r\n      </div>\r\n      <form className='form-container' onSubmit={handleSubmit} >\r\n      \r\n    \r\n\r\n        <TextField\r\n          type='email'\r\n          name='email'\r\n          id='email'\r\n          className='form-input-text'\r\n          margin=\"normal\"\r\n\r\n          variant=\"outlined\"\r\n          label=\"Enter Email\"\r\n          autoFocus\r\n          \r\n          required={true}\r\n          value={auth.username}\r\n          onChange={(e) => setAuth({ ...auth, username: e.target.value })}\r\n        />\r\n    \r\n        <TextField\r\n          \r\n          type='password'\r\n          margin=\"normal\"\r\n          required={true}\r\n          fullWidth\r\n          name='password'\r\n          id='password'\r\n          variant=\"outlined\"\r\n          label=\"Enter Password\"\r\n          className='form-input-text'\r\n          required={true}\r\n          value={auth.password}\r\n          onChange={(e) => setAuth({ ...auth, password: e.target.value })}\r\n        />\r\n        <div style={{ width: '100%' }}>\r\n         <Button variant=\"text\"> <Link to='/auth/forgot' className='form-link'>\r\n            Forgot Password\r\n          </Link> </Button>\r\n          <div className='form-button-container'>\r\n            <Button fullWidth style={{margin: '10px'}} color=\"primary\" variant=\"contained\" type=\"submit\">Login</Button>\r\n           \r\n            <Button  style={{margin: '10px'}} fullWidth variant=\"contained\"\r\n              onClick={() => props.history.push('/auth/register')}\r\n            >\r\n              Sign up\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default connect(null, { authAdd })(Login);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Register.jsx",["258","259","260"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\ForgotPass.jsx",["261"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport '../../../style/authPage/forgotPassword.css'\r\nimport axios from 'axios'\r\nimport { TextField, Button, Snackbar } from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nfunction ForgotPass(props) {\r\n  const [email, setEmail] = useState('')\r\n\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault()\r\n\r\n\r\n    const query = async () => {\r\n\r\n\r\n      const forgotPass = await axios.post('https://instagive-backend.herokuapp.com/user/forgotPassword', { email })\r\n      console.log(forgotPass.data.valid)\r\n\r\n      if (forgotPass.data.valid === false) {\r\n        setOpen({ open: true, severity: 'error', msg: 'Email Not Found!' })\r\n      }\r\n      else if (forgotPass.data.valid === true) {\r\n        setOpen({ open: true, severity: 'success', msg: 'Temporary Password Sent Successfully' })\r\n\r\n      }\r\n\r\n      setEmail('');\r\n\r\n\r\n    }\r\n\r\n    query();\r\n\r\n  }\r\n\r\n\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState({ open: false, severity: '', msg: '' });\r\n\r\n\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen({ ...open, open: false });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div>\r\n\r\n      <Snackbar open={open.open} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={open.severity}>\r\n          {open.msg}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <div className='forgot-pass-container'>\r\n        <div className='forgot-pass-title'>\r\n          <h1 className='authTitle'>Forgot Password</h1>\r\n          <p className='authDetails'>Will send your temporary password in your email, Please change it after you logged in</p>\r\n        </div>\r\n        <form className='form-container' onSubmit={handleSubmit}>\r\n\r\n\r\n\r\n          <TextField required={true} variant=\"outlined\" label=\"Enter Your Email\" fullWidth type=\"email\" name=\"email\" id=\"email\" value={email} style={{ marginBottom: \"10px\" }} onChange={e => { setEmail(e.target.value); console.log(email) }} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>Send</Button>\r\n\r\n\r\n        </form>\r\n\r\n\r\n\r\n\r\n        <div style={{ width: '100%' }} className='form-button-container'>\r\n          <div>\r\n            <Button variant=\"text\"><Link to=\"/auth/login\" className='form-link'>Login</Link></Button>\r\n            <Button variant=\"text\">  <Link to=\"/auth/register\" className='form-link'>Signup</Link> </Button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgotPass;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsUpdatePage.jsx",["262"],"import axios from 'axios';\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../../../style/detailsPage/detailsUpdatePage.css'\r\nimport Carousel from 'react-elastic-carousel'\r\nimport 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport '../../../style/detailsPage/detailsUpdatePage.css'\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction DetailsUpdatePage(props) {\r\n    const [updateList, setUpdateList] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        const getUpdateList = async () => {\r\n            const { data } = await axios.get(`https://instagive-backend.herokuapp.com/updates/getall/${props.match.params.id}`)\r\n            setUpdateList(data)\r\n        }\r\n\r\n        if (props.post) {\r\n            getUpdateList()\r\n        }\r\n    }, [props.post])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n            <div>\r\n                {props.children}\r\n              \r\n      \r\n      <div className='post-update-container'>\r\n        {updateList.map(update =>\r\n          <div key={update._id} className='update-item-container'>\r\n            <div>\r\n              <Carousel itemsToShow={1}>\r\n                {update.imageList.map(image => <img src={`${image}`} alt={image} key={image} style={{ height: '50vh', width: '100%' }} />)}\r\n              </Carousel>\r\n            </div>\r\n            <div className='post-update-description'>\r\n              {update.description}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n            </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, myProps) => {\r\n    const post = state.postList.find(post => post._id === myProps.match.params.id)\r\n    const authToken = state.auth.token\r\n    return { post, authToken }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DetailsUpdatePage);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPageContent.jsx",["263"],"import React from 'react';\r\nimport '../../../style/detailsPage/detailsPageContent.css'\r\nimport { connect } from 'react-redux';\r\nimport Carousel from 'react-elastic-carousel'\r\nimport SideBarDonor from '../../common/SideBarDonor';\r\nimport 'styled-components'\r\nimport '../../../style/userPage/userPage.css'\r\n\r\nfunction DetailsPageContent(props) {\r\n  console.log(props);\r\n  if (!props.post) return <div>Loading</div>\r\n  return (\r\n    <div style={{marginTop: '1rem'}} className=\"post-container\">\r\n      <div className='post-create-container'>\r\n\r\n      <div className=\"post-detail-text-container\" style={{display: 'flex', justifyContent: 'center'}}>\r\n            <label className='form-label' htmlFor='post-profile-pic'>{props.post.Title}</label>\r\n          </div>\r\n\r\n\r\n          <img style={{maxHeight: '100%', maxWidth: '70%', alignSelf: 'center'}} src={`${props.post.profilePic}`} alt=\"Profile Photo Here\" />\r\n\r\n\r\n        \r\n          <div className=\"post-detail-text-container\">\r\n          \r\n        \r\n          <div style={{alignSelf:'center'}}>Details:</div>\r\n          <p>{props.post.description}</p>\r\n          </div>\r\n      \r\n      \r\n      \r\n         \r\n          <div>\r\n            <label className='form-label' htmlFor='postImages'>Images:</label>\r\n            <Carousel itemsToShow={1}>\r\n              {props.post.imageList.map(image => <img className=\"carousel-item\" src={`${image}`} alt={image} key={image} />)}\r\n            </Carousel>\r\n          </div>\r\n     \r\n     \r\n\r\n\r\n\r\n        </div>\r\n     \r\n      <SideBarDonor {...props} selectedPost={props.selectedPost} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, myProps) => {\r\n  const post = state.postList.find(post => post._id === myProps.match.params.id)\r\n  return { post }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DetailsPageContent);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\PostList.jsx",["264","265","266","267"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from '@material-ui/core/';\r\nimport axios from 'axios';\r\n\r\nfunction PostList(props) {\r\n  const [openModal, setModal] = useState({ value: '', postId: '' });\r\n  const handleClickOpen = async (postId) => {\r\n    setModal({ value: true, postId });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal({ value: false, postId: '' });\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  if (!props.post)\r\n    return (\r\n      <div className='postCardContainer'>\r\n        <CircularProgress color='inherit' />\r\n      </div>\r\n    );\r\n\r\n  const handleReject = async () => {\r\n    await axios.post(\r\n      `https://instagive-backend.herokuapp.com/post/poststatus/${openModal.postId}/Rejected`,\r\n      { token: localStorage.getItem('user') }\r\n    );\r\n\r\n    handleClose();\r\n\r\n    document.location.reload();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={openModal.value}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='sm'\r\n        fullWidth={true}\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Are you sure you want to delete this post?\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Close\r\n          </Button>\r\n\r\n          <Button onClick={handleReject} color='secondary'>\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Button\r\n        style={{ margin: '12px' }}\r\n        onClick={() => props.history.push('/user/post-create')}\r\n        variant='outlined'\r\n        color='primary'\r\n        endIcon={<AddIcon fontSize='small'></AddIcon>}\r\n      >\r\n        Create Post\r\n      </Button>\r\n      <h3 style={{ textAlign: 'center' }}>Approved Post</h3>\r\n\r\n      <div className='postCardContainer shadow-container'>\r\n        {props.post.filter((post) => post.status === 'Approved').length ===\r\n          0 ? (\r\n          <h2>You have no approved post</h2>\r\n        ) : (\r\n          props.post.map((post) =>\r\n            post.status === 'Approved' ? (\r\n              <div className='hover-container'>\r\n                <Card\r\n                  key={post._id}\r\n                  className={classes.root}\r\n                  style={{ margin: '20px' }}\r\n                >\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() =>\r\n                        props.history.push(`/user/post-details/${post._id}`)\r\n                      }\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n\r\n                    <Button\r\n                      size='small'\r\n                      color='secondary'\r\n                      onClick={() => handleClickOpen(post._id)}\r\n                    >\r\n                      Delete Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )\r\n          )\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <h3 style={{ textAlign: 'center' }}>Pending Post</h3>\r\n\r\n      <div className='postCardContainer shadow-container'>\r\n        {props.post.filter((post) => post.status === 'Pending').length === 0 ? (\r\n          <h2>You have no pending post</h2>\r\n        ) : (\r\n          props.post.map((post) =>\r\n            post.status === 'Pending' ? (\r\n              <div className='hover-container'>\r\n                <Card className={classes.root} style={{ margin: '20px' }}>\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() =>\r\n                        props.history.push(`/user/post-details/${post._id}`)\r\n                      }\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n\r\n                    <Button\r\n                      size='small'\r\n                      color='secondary'\r\n                      onClick={() => handleClickOpen(post._id)}\r\n                    >\r\n                      Delete Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )\r\n          )\r\n        )}\r\n      </div>\r\n\r\n      <h3 style={{ textAlign: 'center' }}>Deleted/Rejected Post</h3>\r\n\r\n      <div className='postCardContainer shadow-container'>\r\n        {props.post.filter((post) => post.status === 'Rejected').length ===\r\n          0 ? (\r\n          <h2>You have no rejected/deleted post</h2>\r\n        ) : (\r\n          props.post.map((post) =>\r\n            post.status === 'Rejected' ? (\r\n              <div className='hover-container'>\r\n                <Card className={classes.root} style={{ margin: '20px' }}>\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() =>\r\n                        props.history.push(`/user/post-details/${post._id}`)\r\n                      }\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { post: state.user.post };\r\n};\r\n\r\nexport default connect(mapStateToProps)(PostList);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPost.jsx",["268","269","270","271","272","273","274","275"],"import React, { useState, Fragment, useEffect } from 'react';\r\nimport route from '../../../route/instagive';\r\n\r\nimport {\r\n  Container,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Button,\r\n  ButtonGroup,\r\n  MenuItem,\r\n  Typography,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  CardMedia,\r\n  Card,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogActions,\r\n  Dialog,\r\n} from '@material-ui/core';\r\nimport Carousel from 'react-elastic-carousel';\r\n\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\n\r\nconst AdminPost = (props) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const { data } = await route.get('/admin/getusers');\r\n      setOrgList(data.approved);\r\n\r\n      const postlist = await route.get('/admin/allpost');\r\n\r\n      setPostList(postlist.data);\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n  const [orgList, setOrgList] = useState([]);\r\n  const [postList, setPostList] = useState([]);\r\n\r\n  const [table, setTable] = useState('Approved');\r\n\r\n  const handleGetUserPost = (orgID) => {\r\n    const getData = async () => {\r\n      const { data } = await route.post(`/admin/userledger/${orgID}`);\r\n      console.log(data);\r\n    };\r\n    console.log(orgID);\r\n    getData();\r\n  };\r\n\r\n  const [openModal, setModal] = useState({ value: '', postId: '', msg: '' });\r\n  const handleClickOpen = async (postId, msg) => {\r\n    setModal({ value: true, postId, msg });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal({ value: false, postId: '', msg: '' });\r\n  };\r\n\r\n  const handleStatus = async () => {\r\n    console.log(openModal.postId);\r\n    await axios.get(\r\n      `https://instagive-backend.herokuapp.com/admin/changepoststatus/${openModal.postId}/${openModal.msg === 'Approve' ? 'Approved' : 'Rejected'\r\n      }`\r\n    );\r\n\r\n    handleClose();\r\n\r\n    document.location.reload();\r\n  };\r\n\r\n  // user post modal\r\n\r\n  const [modalPost, setModalPost] = useState(false);\r\n\r\n  const handleClickOpenPost = async (post) => {\r\n    setPostData({ ...post });\r\n\r\n    setModalPost(true);\r\n  };\r\n\r\n  const handleClosePost = () => {\r\n    setModalPost(false);\r\n    setPostData({});\r\n  };\r\n\r\n  const [postData, setPostData] = useState({});\r\n\r\n  console.log(postData);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Dialog\r\n        open={modalPost}\r\n        onClose={handleClosePost}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='xl'\r\n        fullWidth={true}\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            <div className='post-container'>\r\n              <div className='post-create-container'>\r\n                <div\r\n                  className='post-detail-text-container'\r\n                  style={{ display: 'flex', justifyContent: 'center' }}\r\n                >\r\n                  <label className='form-label' htmlFor='post-profile-pic'>\r\n                    {postData.Title}\r\n                  </label>\r\n                </div>\r\n                <img\r\n                  style={{ maxHeight: 700, maxWidth: '60vw' }}\r\n                  src={`${postData.profilePic}`}\r\n                  alt='Profile Photo Here'\r\n                />\r\n\r\n                <div className='post-detail-text-container'>\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      flexDirection: 'column',\r\n                      alignItems: 'center',\r\n                    }}\r\n                    className='shadow-container'\r\n                  >\r\n                    <label htmlFor='details'>Details:</label>\r\n                    <p>{postData.description}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className='post-detail-text-container'>\r\n                  <label className='form-label' htmlFor='postImages'>\r\n                    Images:\r\n                  </label>\r\n                  <Carousel itemsToShow={1}>\r\n                    {postData.imageList &&\r\n                      postData.imageList.map((image) => (\r\n                        <img\r\n                          src={`${image}`}\r\n                          alt={image}\r\n                          key={image}\r\n                          style={{ height: '40vh', width: '100%' }}\r\n                        />\r\n                      ))}\r\n                  </Carousel>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={handleClosePost} color='primary'>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog\r\n        open={openModal.value}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='sm'\r\n        fullWidth={true}\r\n      >\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            {`Are you sure you want to ${openModal.msg} this post?`}\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Close\r\n          </Button>\r\n\r\n          <Button onClick={handleStatus} color='secondary'>\r\n            {openModal.msg}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <h1 className='admin-page-title'>Organization Post</h1>\r\n\r\n      <Container\r\n        style={{ display: 'flex', justifyContent: 'space-between' }}\r\n        component='main'\r\n        maxWidth='xl'\r\n      >\r\n        <Typography variant='h2'> {table}</Typography>\r\n\r\n        <ButtonGroup\r\n          variant='outlined'\r\n          aria-label='outlined secondary button group'\r\n        >\r\n          <Button\r\n            color={table === 'Approved' ? 'secondary' : 'default'}\r\n            onClick={() => setTable('Approved')}\r\n          >\r\n            Approved\r\n          </Button>\r\n          <Button\r\n            color={table === 'Pending' ? 'secondary' : 'default'}\r\n            onClick={() => setTable('Pending')}\r\n          >\r\n            Pending\r\n          </Button>\r\n          <Button\r\n            color={table === 'Rejected' ? 'secondary' : 'default'}\r\n            onClick={() => setTable('Rejected')}\r\n          >\r\n            Rejected\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Container>\r\n\r\n      <Container component='main' maxWidth='xl' className='shadow-container' style={{display: 'flex'}}>\r\n        {table === 'Pending' ? (\r\n          postList.filter((post) => post.status === 'Pending').length === 0 ? (\r\n            <h2>You have no Pending post</h2>\r\n          ) : (\r\n            postList.map((post) =>\r\n              post.status === 'Pending' ? (\r\n                <Card\r\n                  key={post._id}\r\n                  className={classes.root}\r\n                  style={{ margin: '20px' }}\r\n                >\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() => handleClickOpenPost(post)}\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n\r\n                    <Button\r\n                      size='small'\r\n                      color='secondary'\r\n                      onClick={() => handleClickOpen(post._id, 'Reject')}\r\n                    >\r\n                      Delete Post\r\n                    </Button>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() => handleClickOpen(post._id, 'Approve')}\r\n                    >\r\n                      Approve Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              ) : (\r\n                ''\r\n              )\r\n            )\r\n          )\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {table === 'Approved' ? (\r\n          postList.filter((post) => post.status === 'Approved').length === 0 ? (\r\n            <h2>You have no approved post</h2>\r\n          ) : (\r\n            postList.map((post) =>\r\n              post.status === 'Approved' ? (\r\n                <Card\r\n                  key={post._id}\r\n                  className={classes.root}\r\n                  style={{ margin: '20px' }}\r\n                >\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() => handleClickOpenPost(post)}\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n\r\n                    <Button\r\n                      size='small'\r\n                      color='secondary'\r\n                      onClick={() => handleClickOpen(post._id, 'Reject')}\r\n                    >\r\n                      Delete Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              ) : (\r\n                ''\r\n              )\r\n            )\r\n          )\r\n        ) : (\r\n          ''\r\n        )}\r\n\r\n        {table === 'Rejected' ? (\r\n          postList.filter((post) => post.status === 'Rejected').length === 0 ? (\r\n            <h2>You have no Rejected post</h2>\r\n          ) : (\r\n            postList.map((post) =>\r\n              post.status === 'Rejected' ? (\r\n                <Card\r\n                  key={post._id}\r\n                  className={classes.root}\r\n                  style={{ margin: '20px' }}\r\n                >\r\n                  <CardActionArea>\r\n                    <CardMedia\r\n                      component='img'\r\n                      alt={post.profilePic}\r\n                      height='140'\r\n                      image={`${post.profilePic}`}\r\n                      title={post.profilePic}\r\n                    />\r\n                    <CardContent>\r\n                      <Typography\r\n                        color='primary'\r\n                        gutterBottom\r\n                        variant='h5'\r\n                        component='h2'\r\n                      >\r\n                        {post.Title.substring(0, 20)}\r\n                        {post.Title.length > 20 ? '...' : ''}\r\n                      </Typography>\r\n                      <Typography className={classes.pos} color='textSecondary'>\r\n                        {post.location} |{' '}\r\n                        {post.donationType === 'both'\r\n                          ? 'Cash, In-kind'\r\n                          : post.donationType === 'cash'\r\n                            ? 'Cash'\r\n                            : 'In-kind'}\r\n                      </Typography>\r\n                      <Typography\r\n                        style={{ height: '110px' }}\r\n                        variant='body2'\r\n                        color='textSecondary'\r\n                        component='p'\r\n                      >\r\n                        {post.description.substring(0, 255)}\r\n                        {post.description.length > 250 ? '...' : ''}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() => handleClickOpenPost(post)}\r\n                    >\r\n                      View Post\r\n                    </Button>\r\n\r\n                    <Button\r\n                      size='small'\r\n                      color='primary'\r\n                      onClick={() => handleClickOpen(post._id, 'Approve')}\r\n                    >\r\n                      Approve Post\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              ) : (\r\n                ''\r\n              )\r\n            )\r\n          )\r\n        ) : (\r\n          ''\r\n        )}\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AdminPost;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLedgers.jsx",["276","277"],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  ButtonGroup,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Fragment } from 'react';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport route from '../../../route/instagive'\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst AdminLedgers = () => {\r\n  const [userId, setUserId] = useState(0);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const [table, setTable] = useState('Pending');\r\n  const [orgSelected, setOrgSelected] = useState('')\r\n  const [orgList, setOrgList] = useState([]);\r\n  const [orgLedgerList, setOrgLedgerList] = useState([])\r\n  const [postList, setPostList] = useState([])\r\n\r\n  const classes = useStyles();\r\n  const handleReject = async (orgID) => {\r\n    await route.post(`/admin/changeledgerstatus/${orgID}/Rejected`)\r\n    document.location.reload();\r\n  };\r\n\r\n  const handleApprove = async (orgID) => {\r\n    await route.post(`/admin/changeledgerstatus/${orgID}/Approved`)\r\n    document.location.reload();\r\n  };\r\n\r\n  const handleGetUserLedger = (orgID) => {\r\n    const getData = async () => {\r\n      const { data } = await route.post(`/admin/userledger/${orgID}`)\r\n      setOrgLedgerList(data)\r\n    }\r\n    getData()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const { data: user } = await route.get('/admin/getusers')\r\n      const { data: post } = await route.get('/admin/allpost')\r\n      setOrgList(user.approved)\r\n      setPostList(post)\r\n    }\r\n\r\n    getData()\r\n  }, [])\r\n  console.log(orgLedgerList)\r\n  return (\r\n    <div>\r\n      <h1 className='admin-page-title'>Ledgers</h1>\r\n\r\n      <Container\r\n        style={{ display: 'flex', justifyContent: 'space-between' }}\r\n        component='main'\r\n        maxWidth='xl'\r\n      >\r\n        <FormControl\r\n          style={{ marginBottom: '12px', marginLeft: '12px' }}\r\n          className={classes.formControl}\r\n        >\r\n          <InputLabel style={{ marginLeft: '12px' }} id='post'>\r\n            {orgSelected === '' ? 'Select Org' : orgSelected}\r\n          </InputLabel>\r\n\r\n          <Select\r\n            required={true}\r\n            variant='outlined'\r\n            label='city'\r\n            name='city'\r\n            id='city'\r\n            // value={ledgerForm.postId}\r\n          >\r\n          {orgList.map(org =>\r\n              <MenuItem \r\n                key={org._id}\r\n                onClick={() => {\r\n                setOrgSelected(org.orgName)\r\n                handleGetUserLedger(org._id)\r\n              }}\r\n              >\r\n                {org.orgName}\r\n                </MenuItem>\r\n            )}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <Typography variant='h2'> {table}</Typography>\r\n\r\n        <ButtonGroup\r\n          variant='outlined'\r\n          aria-label='outlined secondary button group'\r\n        >\r\n          <Button color={table === 'Approved' ? 'secondary' : 'default'} onClick={() => setTable('Approved')}>\r\n            Approved\r\n          </Button>\r\n          <Button color={table === 'Pending' ? 'secondary' : 'default'} onClick={() => setTable('Pending')}>\r\n            Pending\r\n          </Button>\r\n          <Button color={table === 'Rejected' ? 'secondary' : 'default'} onClick={() => setTable('Rejected')}>\r\n            Rejected\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Container>\r\n\r\n      <Container component='main' maxWidth='xl' className='shadow-container'>\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <Fragment>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <StyledTableCell align='center'>POST</StyledTableCell>\r\n                    <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                    <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      DONATION TYPE\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      Payment Method (If Cash Donation)\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      AMOUNT / ITEM QUANTITY\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                    <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                    <StyledTableCell align='center'>STATUS</StyledTableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {orgLedgerList.filter(post => post.status === table).map(post =>\r\n                    <StyledTableRow key={post._id}>\r\n                      <StyledTableCell align='center'>{postList.find(postItem => postItem._id === post.postId).Title}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.donorName}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.email}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.donationType}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.paymentAddress}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.amount}</StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >{post.remarks}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.date}</StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {table === 'Approved' && (\r\n                          <Button\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            onClick={() => handleReject(post._id)}\r\n                          >\r\n                            <ClearIcon />\r\n                          </Button>\r\n                        )}\r\n                        {table === 'Pending' && (\r\n                          <ButtonGroup>\r\n                            <Button\r\n                              variant='contained'\r\n                              color='primary'\r\n                              onClick={() => handleApprove(post._id)}\r\n                            >\r\n                              <CheckIcon />\r\n                            </Button>{' '}\r\n                            <Button\r\n                              variant='contained'\r\n                              color='secondary'\r\n                              onClick={() => handleReject(post._id)}\r\n                            >\r\n                              <ClearIcon />\r\n                            </Button>{' '}\r\n                          </ButtonGroup>\r\n                        )}\r\n                        {table === 'Rejected' && (\r\n                          <Button\r\n                            variant='contained'\r\n                            color='primary'\r\n                            onClick={() => handleApprove(post._id)}\r\n                          >\r\n                            <CheckIcon />\r\n                          </Button>\r\n                        )}\r\n                      </StyledTableCell>\r\n                    </StyledTableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Fragment>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLedgers;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLogin.jsx",["278","279"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport { Container, TextField, Typography, CssBaseline, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction AdminLogin(props) {\r\n  const [auth, setAuth] = useState({ username: '', password: '' })\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault()\r\n\r\n    const valid = await axios.post('https://instagive-backend.herokuapp.com/admin/login', auth);\r\n\r\n    if (valid.data.valid !== true)\r\n      window.alert(valid.data.valid);\r\n\r\n    else {\r\n\r\n\r\n      console.log(valid.data.token);\r\n      localStorage.setItem('admin', valid.data.token)\r\n      window.location.reload();\r\n\r\n      window.alert('Login Success');\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n  }));\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <Container component=\"main\" maxWidth=\"sm\" >\r\n\r\n\r\n\r\n\r\n      <CssBaseline />\r\n\r\n\r\n\r\n\r\n      <div className={classes.paper}>\r\n\r\n\r\n\r\n        <div style={{ padding: '5px 25px 50px 25px' }} className=\"shadow-container\">\r\n          <h1 style={{ position: 'relative', left: '30%' }} className='authTitle'>Admin Login</h1>\r\n\r\n\r\n\r\n          <form action=\"#\" className='form-container' >\r\n            <TextField style={{ marginBottom: '12px' }} variant=\"outlined\" type=\"text\" name=\"username\" id=\"username\" label='Enter Username: ' className='form-input-text' value={auth.username} onChange={e => setAuth({ ...auth, username: e.target.value })} />\r\n            <TextField style={{ marginBottom: '12px' }} variant=\"outlined\" type=\"password\" name=\"password\" id=\"password\" label='Enter Password' className='form-input-text' value={auth.password} onChange={e => setAuth({ ...auth, password: e.target.value })} />\r\n\r\n\r\n\r\n\r\n\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} fullWidth>Login</Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n\r\n  );\r\n}\r\n\r\nexport default AdminLogin;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminRejected.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminAccepted.jsx",["280","281"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { accountRejected } from '../../../app/accounts'\r\n\r\nfunction AdminAccepted(props) {\r\n    const theadData = [\r\n        {\r\n            label: 'Organization',\r\n            name: 'orgName'\r\n        },\r\n        {\r\n            label: 'Email',\r\n            name: 'email'\r\n        },\r\n        {\r\n            label: 'City',\r\n            name: 'city'\r\n        },\r\n        {\r\n            label: 'Rep. Name',\r\n            name: 'repName'\r\n        },\r\n    ]\r\n\r\n    const handleEditButton = (account) => {\r\n        console.log(account);\r\n    }\r\n\r\n    const handleDeleteButton = async (account) => {\r\n        props.accountRejected(account)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className='admin-page-title'>Accepted</h1>\r\n            <table className='table-container'>\r\n                <thead>\r\n                    <tr>\r\n                        {theadData.map(tableHead =>\r\n                            <th key={tableHead.name} className='table-header'>{tableHead.label}</th>\r\n                        )}\r\n                        <th className='table-header'>No. of Post</th>\r\n                        <th className='table-header'>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.accApproved.map(account =>\r\n                        <tr key={account._id}>\r\n                            {theadData.map(tableHead =>\r\n                                <td key={tableHead.name} className='table-item'>\r\n                                    {account[tableHead.name]}</td>\r\n                            )}\r\n                            <td className='table-item'>\r\n\r\n                            </td>\r\n                            <td className='table-item'>\r\n                                {/* <FontAwesomeIcon\r\n                                    icon={faEdit}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={e => handleEditButton(account)}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                /> */}\r\n                                <FontAwesomeIcon\r\n                                    icon={faTrash}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={e => handleDeleteButton(account)}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { accApproved: state.accounts.approved }\r\n}\r\n\r\nexport default connect(mapStateToProps, { accountRejected })(AdminAccepted);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPending.jsx",["282"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { accountApproved, accountRejected } from '../../../app/accounts'\r\n\r\n\r\nfunction AdminPending(props) {\r\n\r\n    const theadData = [\r\n        {\r\n            label: 'Organization',\r\n            name: 'orgName'\r\n        },\r\n        {\r\n            label: 'Email',\r\n            name: 'email'\r\n        },\r\n        {\r\n            label: 'City',\r\n            name: 'city'\r\n        },\r\n        {\r\n            label: 'Rep. Name',\r\n            name: 'repName'\r\n        },\r\n    ]\r\n\r\n    const handleApproveAccount = async (account) => {\r\n        // await axios.post(`http://localhost:5000/admin/changestatus/${account}/approved`)\r\n        //     .then(() => accountList = [])\r\n        props.accountApproved(account)\r\n        // window.location.reload();\r\n    };\r\n\r\n    const handleRejectAccount = async (account) => {\r\n        props.accountRejected(account)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className='admin-page-title'>Pending</h1>\r\n            <table className='table-container'>\r\n                <thead>\r\n                    <tr>\r\n                        {theadData.map(tableHead =>\r\n                            <th key={tableHead.name} className='table-header'>{tableHead.label}</th>\r\n                        )}\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.accountPending.map(account =>\r\n                        <tr key={account._id}>\r\n                            {theadData.map(tableHead =>\r\n                                <td key={tableHead.name} className='table-item'>\r\n                                    {account[tableHead.name]}\r\n                                </td>\r\n                            )}\r\n                            <td className='table-item' id='table-button-container'>\r\n                                <FontAwesomeIcon\r\n                                    icon={faCheck}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={() => handleApproveAccount(account)}\r\n                                />\r\n                                <FontAwesomeIcon\r\n                                    icon={faTimes}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={() => handleRejectAccount(account)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { accountPending: state.accounts.pending }\r\n}\r\nexport default connect(mapStateToProps, { accountApproved, accountRejected })(AdminPending);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Sidebar.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\UserPostDetails.jsx",["283"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { cityLocation } from '../../../others/cityLocation'\r\nimport {\r\n  TextField, Button, FormControl, InputLabel, Select, MenuItem, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar,\r\n  Chip\r\n} from '@material-ui/core/'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { userPostUpdated } from '../../../../app/user'\r\nimport Carousel from 'react-elastic-carousel'\r\nimport 'styled-components'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\n\r\nfunction UserPostDetails(props) {\r\n  const post = props.post\r\n  const [postForm, setPostForm] = useState({\r\n    Title: '',\r\n    description: '',\r\n    location: '',\r\n    donationType: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (post) setPostForm({\r\n      Title: post.Title,\r\n      description: post.description,\r\n      location: post.location,\r\n      donationType: post.donationType,\r\n    })\r\n  }, [post])\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const saveUpdate = async () => {\r\n      props.userPostUpdated(postForm, post._id, props.auth.token)\r\n      handleClose()\r\n      handleClickAlert()\r\n    }\r\n    saveUpdate();\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const [openModal, setModal] = useState(false);\r\n  const handleClickOpen = async () => setModal(true);\r\n  const handleClose = () => setModal(false);\r\n  const [snacker, setSnacker] = useState(false);\r\n  const handleClickAlert = () => setSnacker(true);\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setSnacker(false);\r\n  };\r\n\r\n  if (!props.post) {\r\n    return (\r\n      <div>Loading...</div>\r\n    )\r\n  }\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Snackbar open={snacker} autoHideDuration={2000} onClose={handleCloseAlert}>\r\n          <Alert onClose={handleCloseAlert} severity=\"success\">Successfully Saved</Alert>\r\n        </Snackbar>\r\n      </div>\r\n      <Button onClick={() => props.history.push(`/user/update-details/${props.match.params.id}`)} style={{ margin: '12px' }} variant=\"outlined\" color=\"default\"endIcon={<ExitToAppIcon size=\"smaill\"></ExitToAppIcon>} >Updates</Button>\r\n      <Button onClick={handleClickOpen} style={{ margin: '12px' }} variant=\"outlined\" color=\"primary\" endIcon={<EditIcon size=\"smaill\"></EditIcon>}>Edit Post</Button>\r\n    \r\n    \r\n      <Dialog open={openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth='sm' fullWidth={true}>\r\n        <DialogTitle id=\"form-dialog-title\" style={{ alignSelf: 'center', fontSize: '50px' }}>Edit Post</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please Fill the Inputs Bellow:\r\n          </DialogContentText>\r\n          <TextField\r\n            style={{ marginBottom: '12px' }} variant=\"outlined\" fullWidth={true}\r\n            label=\"Title\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            id=\"title\"\r\n            value={postForm.Title}\r\n            onChange={e => setPostForm({ ...postForm, Title: e.target.value })}\r\n          />\r\n          <FormControl fullWidth className={classes.formControl}>\r\n            <InputLabel style={{ marginLeft: '12px' }} id='city'>\r\n              Select Location\r\n              </InputLabel>\r\n            <Select\r\n              variant='outlined'\r\n              label='city'\r\n              name='city'\r\n              id='city'\r\n              fullWidth\r\n              value={postForm.location}\r\n              onChange={(e) =>\r\n                setPostForm({ ...postForm, location: e.target.value })}>\r\n              {cityLocation.map((city) =>\r\n                <MenuItem key={city} value={city}>{city}</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n          <TextField\r\n            rows={15}\r\n            multiline\r\n            style={{ marginBottom: '12px', marginTop: '12px' }} label=\"Description\" variant=\"outlined\" fullWidth={true}\r\n            type=\"text\"\r\n            name='postDetails'\r\n            value={postForm.description}\r\n            onChange={e => setPostForm({ ...postForm, description: e.target.value })}\r\n            id='postDetails'\r\n            className=''\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"contained\" onClick={handleSubmit} color=\"primary\">\r\n            SAVE\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    \r\n      <div className='post-container'>\r\n        <div className=\"post-create-container\">\r\n\r\n          <div className=\"post-detail-text-container\" style={{display: 'flex', justifyContent: 'center'}}>\r\n            <label className='form-label' htmlFor='post-profile-pic'>{post.Title}</label>\r\n          </div>\r\n          <img style={{maxHeight: '100%', maxWidth:'70%', alignSelf: 'center'}} src={`${post.profilePic}`} alt=\"Profile Photo Here\" />\r\n\r\n         \r\n\r\n          <div className=\"post-detail-text-container\">\r\n          \r\n        \r\n            <div style={{alignSelf:'center'}}>Details:</div>\r\n            <p>{post.description}</p>\r\n            </div>\r\n      \r\n\r\n          <div>\r\n            <label className='form-label' htmlFor='postImages'>Images:</label>\r\n            <Carousel itemsToShow={1}>\r\n              {post.imageList.map(image => <img className=\"carousel-item\" src={`${image}`} alt={image} key={image} />)}\r\n            </Carousel>\r\n          </div>\r\n     \r\n     \r\n     \r\n     \r\n        </div>\r\n\r\n\r\n        {/* Start */}\r\n        <aside className='user-sidebar-donor'>\r\n          <div>\r\n\r\n\r\n            {props.post.donationType === \"In-Kind\" ?\r\n              <div>\r\n                <Chip style={{ marginBottom: '10px', width: '200px' }} label={props.post.location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n                <Chip style={{ width: '200px' }} label={props.post.donationType === \"Both\" ? 'Cash/In-Kind' : props.post.donationType} variant=\"outlined\" color=\"primary\" />\r\n              </div>\r\n              :\r\n              <div>\r\n                <Chip style={{ marginBottom: '10px' }} label={props.post.location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n                <Chip label={props.post.donationType === \"Both\" ? 'Cash/In-Kind' : props.post.donationType} variant=\"outlined\" color=\"primary\" />\r\n              </div>\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            {props.post.donationType === 'Both' || props.post.donationType === 'Cash' ?\r\n              <div>\r\n                <div>\r\n                  <h3 className='user-sidebar-donor-data'>₱{props.post.currentAmount}</h3>\r\n                  <p className='user-sidebar-donor-text'>Total Raise</p>\r\n                </div>\r\n                <div>\r\n                  <h3 className='user-sidebar-donor-data'>₱{props.post.totalAmount}</h3>\r\n                  <p className='user-sidebar-donor-text'>Target Amount</p>\r\n                </div>\r\n\r\n\r\n\r\n              </div>\r\n              : ''}\r\n\r\n            {props.post.donationType === 'Both' || props.post.donationType === 'In-Kind' ?\r\n\r\n              <div>\r\n                <h3 className='user-sidebar-donor-data'>&nbsp;&nbsp;{props.post.itemQuantity}</h3>\r\n                <p className='user-sidebar-donor-text'>&nbsp;Items Donated</p>\r\n              </div>\r\n\r\n              : ''}\r\n\r\n\r\n\r\n\r\n            <div>\r\n              <h3 className='user-sidebar-donor-data'>&nbsp;&nbsp;{props.post.totalDonors}</h3>\r\n              <p className='user-sidebar-donor-text'>&nbsp;&nbsp;Donors</p>\r\n            </div>\r\n\r\n      \r\n\r\n          </div>\r\n        </aside>\r\n        {/* End */}\r\n\r\n      </div>\r\n      <div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, myProps) => {\r\n  const post = state.user.post.find(post => post._id === myProps.match.params.id)\r\n  return { post, auth: state.auth }\r\n}\r\n\r\nexport default connect(mapStateToProps, { userPostUpdated })(UserPostDetails);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\changePassPage\\ChangePass.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\UpdateUserPost.jsx",["284"],"import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport PostCreateUpdate from './PostCreateUpdate';\r\nimport PostDetailUpdate from './PostDetailUpdate';\r\n\r\nfunction UpdateUserPost(props) {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path='/user/update-details/:id/create' component={PostCreateUpdate} />\r\n                <Route path='/user/update-details/:id' component={PostDetailUpdate} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateUserPost;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\PostCard.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\others\\cityLocation.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostDetailUpdate.jsx",["285","286"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  TextField, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar,\r\n} from '@material-ui/core/'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { connect } from 'react-redux';\r\nimport Carousel from 'react-elastic-carousel'\r\nimport 'styled-components'\r\nimport '../../../../style/userPage/userPage.css'\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction PostDetailUpdate(props) {\r\n\r\n\r\n  const [updateList, setUpdateList] = useState([])\r\n  const [descriptionForm, setDescriptionForm] = useState('')\r\n  const [files, setfiles] = useState({\r\n    imageList: ''\r\n  })\r\n  const [numberImage, setNumberImage] = useState(0)\r\n\r\n  const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n\r\n    const formdata = new FormData();\r\n\r\n    for (const key in files.imageList) {\r\n      formdata.append('imageList', files.imageList[key]);\r\n    }\r\n\r\n\r\n\r\n    formdata.append('description', descriptionForm);\r\n    formdata.append('token', localStorage.getItem('user'))\r\n\r\n\r\n\r\n\r\n    await axios.post(`https://instagive-backend.herokuapp.com/updates/${props.match.params.id}`, formdata)\r\n    handleClose()\r\n    handleClickAlert()\r\n    document.location.reload();\r\n\r\n\r\n  }\r\n\r\n  const handleImage = async (e) => {\r\n    setfiles({ imageList: e.target.files })\r\n    setNumberImage(e.target.files.length)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = async () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const [snacker, setSnacker] = useState(false);\r\n\r\n\r\n\r\n\r\n  const handleClickAlert = () => {\r\n    setSnacker(true);\r\n  };\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnacker(false);\r\n  };\r\n\r\n\r\n\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const getUpdateList = async () => {\r\n      const { data } = await axios.get(`https://instagive-backend.herokuapp.com/updates/getall/${props.match.params.id}`, { token: props.authToken })\r\n      setUpdateList(data)\r\n    }\r\n    if (props.post) {\r\n      getUpdateList()\r\n    }\r\n  }, [props.post])\r\n\r\n\r\n\r\n\r\n\r\n  if (!updateList) return <div>No updates yet...</div>\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={snacker} autoHideDuration={2000} onClose={handleCloseAlert}>\r\n        <Alert onClose={handleCloseAlert} severity=\"success\">\r\n          Update Successfully Created\r\n                       </Alert>\r\n\r\n\r\n      </Snackbar>\r\n\r\n\r\n\r\n      <div className=\"post-update-detail-button\">\r\n        <Button onClick={() => props.history.push(`/user/post-details/${props.match.params.id}`)} style={{ margin: '12px' }} variant=\"outlined\" color=\"default\" endIcon={<ExitToAppIcon size=\"small\"></ExitToAppIcon>} >Back to Post</Button>\r\n        <Button onClick={handleClickOpen} style={{ margin: '12px' }} variant=\"outlined\" color=\"primary\" endIcon={<NoteAddIcon size=\"small\"></NoteAddIcon>} >Create New Update</Button>\r\n      </div>\r\n\r\n\r\n\r\n      \r\n      <div className='post-update-container'>\r\n        {updateList.map(update =>\r\n          <div key={update._id} className='update-item-container'>\r\n            <div>\r\n              <Carousel itemsToShow={1}>\r\n                {update.imageList.map(image => <img src={`${image}`} alt={image} key={image} style={{ height: '50vh', width: '100%' }} />)}\r\n              </Carousel>\r\n            </div>\r\n            <div className='post-update-description'>\r\n              {update.description}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <Dialog open={openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth='sm' fullWidth={true}>\r\n        <form encType='multipart/form-data'>\r\n          <DialogTitle id=\"form-dialog-title\" style={{ alignSelf: 'center', fontSize: '50px' }}>Create Update</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please Fill the Inputs Bellow:\r\n                       </DialogContentText>\r\n            <TextField\r\n              rows={10}\r\n              multiline\r\n              style={{ marginBottom: '12px' }} label=\"Post Update Description\" variant=\"outlined\" fullWidth={true}\r\n              type=\"text\"\r\n              name='postDetails'\r\n              value={descriptionForm}\r\n              onChange={e => setDescriptionForm(e.target.value)}\r\n              id='postDetails'\r\n              className=''\r\n            />\r\n\r\n            <Button variant='outlined' color='primary' component='label' style={{ marginTop: '12px' }}>\r\n              {`Upload Picture (Can Have Multiple Pictures) | Files Selected: ${numberImage}`}\r\n              <input\r\n                hidden\r\n                type='file'\r\n                id='postImages'\r\n                name='postImages'\r\n                onChange={handleImage}\r\n                multiple\r\n\r\n              ></input>\r\n            </Button>\r\n\r\n\r\n\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n                       </Button>\r\n            <Button variant=\"contained\" onClick={handleSubmit} color=\"primary\">\r\n              SAVE\r\n                       </Button>\r\n          </DialogActions>\r\n\r\n        </form>\r\n      </Dialog>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, myProps) => {\r\n  const post = state.postList.find(post => post._id === myProps.match.params.id)\r\n  const authToken = state.auth.token\r\n  return { post, authToken }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PostDetailUpdate);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostCreateUpdate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreateDetails.jsx",["287"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../../../style/userPage/userPage.css';\r\nimport { cityLocation } from '../../../others/cityLocation';\r\nimport axios from 'axios';\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Typography,\r\n  CssBaseline,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction PostCreateDetails(props) {\r\n  const [postForm, setPostForm] = useState({\r\n    Title: '',\r\n    description: '',\r\n    location: '',\r\n    donationType: 'Cash',\r\n    totalAmount: '',\r\n  });\r\n  const [files, setFiles] = useState({\r\n    imageList: '',\r\n    profilePic: '',\r\n  });\r\n\r\n  const [numberImage, setNumberImage] = useState({\r\n\r\n    name: ''\r\n\r\n  })\r\n  const [numberImageList, setNumberImageList] = useState(0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const formdata = new FormData();\r\n\r\n    formdata.append('profilePic', files.profilePic);\r\n\r\n    for (const key in files.imageList) {\r\n      formdata.append('imageList', files.imageList[key]);\r\n    }\r\n    formdata.append('Title', postForm.Title);\r\n    formdata.append('description', postForm.description);\r\n    formdata.append('location', postForm.location);\r\n    formdata.append('donationType', postForm.donationType);\r\n    formdata.append('totalAmount', postForm.totalAmount);\r\n    formdata.append('token', localStorage.getItem('user'));\r\n\r\n\r\n    console.log(...formdata);\r\n\r\n\r\n    const data = await axios.post(\r\n      'https://instagive-backend.herokuapp.com/post/createpost',\r\n      formdata\r\n    );\r\n\r\n\r\n    window.location.replace('https://instagive.vercel.app/user');\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Container component='main' maxWidth='md'>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n\r\n          <div style={{ padding: '50px 25px 50px 25px' }} className=\"shadow-container\">\r\n\r\n\r\n            <Typography component='h1' variant='h5'>\r\n              Creating New Post{' '}\r\n            </Typography>\r\n\r\n            <form encType='multipart/form-data' className={classes.form} onSubmit={handleSubmit}>\r\n              <Button variant='outlined' color='primary' component='label' >\r\n                {`Upload Cover Photo : ${numberImage.name === '' ? 'NONE' : numberImage.name}`}\r\n                <input\r\n                  hidden\r\n                  type='file'\r\n                  required={true}\r\n                  onChange={(e) => {\r\n                    const file = e.target.files[0];\r\n                    setFiles({ ...files, profilePic: file });\r\n                    setNumberImage({ name: e.target.files[0].name })\r\n                  }}\r\n                ></input>\r\n              </Button>\r\n\r\n              <TextField\r\n                color='primary'\r\n                margin='normal'\r\n                fullWidth\r\n                variant='outlined'\r\n                label='Enter Post Title'\r\n                type='text'\r\n                required={true}\r\n                name='title'\r\n                id='title'\r\n                className='user-form-input'\r\n                value={postForm.Title}\r\n                onChange={(e) =>\r\n                  setPostForm({ ...postForm, Title: e.target.value })\r\n                }\r\n              />\r\n\r\n\r\n\r\n              <FormControl fullWidth className={classes.formControl}>\r\n                <InputLabel style={{ marginLeft: '12px' }} id='city'>\r\n                  Select Location\r\n              </InputLabel>\r\n\r\n                <Select\r\n                  required={true}\r\n                  variant='outlined'\r\n                  label='city'\r\n                  name='city'\r\n                  id='city'\r\n                  fullWidth\r\n                  value={postForm.location}\r\n                  onChange={(e) =>\r\n                    setPostForm({ ...postForm, location: e.target.value })\r\n                  }\r\n                >\r\n                  {cityLocation.map((city) => (\r\n                    <MenuItem key={city} value={city}>{city}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <FormControl\r\n                component='fieldset'\r\n                style={{ margin: '12px 0 0 12px' }}\r\n              >\r\n                <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n                <RadioGroup\r\n                  aria-label='gender'\r\n                  name='gender1'\r\n                  value={postForm.donationType}\r\n                  onChange={(e) =>\r\n                    setPostForm({ ...postForm, donationType: e.target.value, totalAmount: 0 })\r\n                  }\r\n                >\r\n                  <FormControlLabel\r\n                    value='Cash'\r\n                    control={<Radio />}\r\n                    label='Cash'\r\n                  />\r\n                  <FormControlLabel\r\n                    value='In-Kind'\r\n                    control={<Radio />}\r\n                    label='In-Kind'\r\n                  />\r\n                  <FormControlLabel\r\n                    value='Both'\r\n                    control={<Radio />}\r\n                    label='Both'\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n\r\n              {postForm.donationType === 'In-Kind' ? '' :\r\n\r\n\r\n                <TextField\r\n                  required={true}\r\n                  color='primary'\r\n                  margin='normal'\r\n                  fullWidth\r\n                  variant='outlined'\r\n                  label='Enter Amount'\r\n                  type='number'\r\n                  name='totalAmount'\r\n                  id='totalAmount'\r\n                  className='user-form-input'\r\n                  value={postForm.totalAmount}\r\n                  onChange={(e) =>\r\n                    setPostForm({ ...postForm, totalAmount: e.target.value })\r\n\r\n                  }\r\n                />\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <TextField\r\n                required={true}\r\n                variant=\"outlined\"\r\n                rows={10}\r\n                type='text'\r\n                multiline\r\n                id='description'\r\n                fullWidth \r\n                label=\"Enter your Post Description\"\r\n                placeholder=\"You can include your own payment option and account, (etc, GCASH, BPI, PAYPAL) or  your address for In-Kind Donation\"\r\n                name='description'\r\n                value={postForm.description}\r\n                onChange={(e) =>\r\n                  setPostForm({ ...postForm, description: e.target.value })\r\n                }\r\n\r\n\r\n\r\n\r\n              />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <Button variant='outlined' color='primary' component='label' style={{ marginTop: '12px' }}>\r\n                {`Upload Reference Picture (Can Have Multiple Pictures) | Files Selected: ${numberImageList}`}\r\n                <input\r\n                  required={true}\r\n                  hidden\r\n                  type='file'\r\n                  id='postImages'\r\n                  name='postImages'\r\n                  onChange={(e) => {\r\n                    const multifiles = e.target.files;\r\n                    setFiles({ ...files, imageList: multifiles });\r\n                    setNumberImageList(e.target.files.length)\r\n                  }}\r\n                  multiple\r\n\r\n                ></input>\r\n              </Button>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <div style={{ marginTop: '12px', display: 'flex' }}>\r\n                <Button variant='outlined' color=\"default\" style={{ marginRight: '12px' }}> <Link to='/user'>Cancel</Link> </Button>\r\n\r\n\r\n\r\n                <Button variant='contained' color='primary' type=\"submit\">Save</Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default PostCreateDetails;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerCreate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\SideBarDonor.jsx",["288","289","290","291","292","293"],"import React, { useState, useEffect } from 'react';\r\nimport '../../style/common/sidebarDonor.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { Snackbar, Chip, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@material-ui/core'\r\n\r\nimport axios from 'axios'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    position: 'relative',\r\n    overflow: 'auto',\r\n    maxHeight: 300,\r\n  },\r\n  listSection: {\r\n    backgroundColor: 'inherit',\r\n  },\r\n  ul: {\r\n    backgroundColor: 'inherit',\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\n\r\nfunction SideBarDonor(props) {\r\n  const classes = useStyles();\r\n  const { selectedPost: {\r\n    totalDonors,\r\n    totalAmount,\r\n    currentAmount,\r\n    itemQuantity,\r\n    donationType,\r\n    _id,\r\n    location\r\n\r\n  }\r\n  } = props\r\n  const [donorList, setDonorList] = useState([])\r\n\r\n  useEffect(() => {\r\n    const postId = _id\r\n\r\n    const getDonors = async () => {\r\n      const { data } = await axios.get(`https://instagive-backend.herokuapp.com/ledger/getpostrecords/${props.match.params.id}`)\r\n\r\n      setDonorList(data.filter(data => data.status === 'Approved'))\r\n\r\n\r\n    }\r\n    getDonors()\r\n  }, [])\r\n\r\n\r\n  const [donateForm, setDonateForm] = useState({\r\n\r\n    donorName: '',\r\n    amount: 0,\r\n    remarks: '',\r\n    email: '',\r\n    donationType: 'Cash',\r\n    paymentAddress: ''\r\n\r\n  })\r\n\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n  const [captcha, setCaptcha] = useState(false)\r\n\r\n  const handleCaptcha = (value) => {\r\n    \r\n      if(value !== null) setCaptcha(true);\r\n\r\n  }\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n\r\n    e.preventDefault()\r\n\r\n\r\n// Site Key = 6LeZELwaAAAAAJr4hCyldepcnin7DElTijIPY5bv\r\n// Secret Key = 6LeZELwaAAAAAJhu_f2dQl2tL9PRLIrw_TMOAwrx\r\n\r\n    if (donateForm.amount === 0) return handleClose()\r\n    else {\r\n      await axios.post(`https://instagive-backend.herokuapp.com/ledger/pending/${_id}`, { ...donateForm, token: localStorage.getItem('user') })\r\n        .catch(err => console.log('Error: ', err))\r\n\r\n\r\n\r\n    }\r\n\r\n    handleClose();\r\n    setSnacker(true);\r\n\r\n\r\n  }\r\n\r\n  const [snacker, setSnacker] = useState(false);\r\n\r\n\r\n\r\n\r\n  const handleClickAlert = () => {\r\n    setSnacker(true);\r\n  };\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnacker(false);\r\n  };\r\n\r\n\r\n\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <aside>\r\n\r\n\r\n\r\n      <Snackbar open={snacker} autoHideDuration={2000} onClose={handleCloseAlert}>\r\n        <Alert onClose={handleCloseAlert} severity=\"success\">\r\n          Successfully Donated\r\n  </Alert>\r\n\r\n\r\n      </Snackbar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <div className='sidebar-donor'>\r\n\r\n\r\n        {donationType === \"In-Kind\" ?\r\n          <div>\r\n            <Chip style={{ marginBottom: '10px', width: '200px' }} label={location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n            <Chip style={{ width: '200px' }} label={donationType === \"Both\" ? 'Cash/In-Kind' : donationType} variant=\"outlined\" color=\"primary\" />\r\n          </div>\r\n          :\r\n          <div>\r\n            <Chip style={{ marginBottom: '10px' }} label={location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n            <Chip label={donationType === \"Both\" ? 'Cash/In-Kind' : donationType} variant=\"outlined\" color=\"primary\" />\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        {donationType === 'Both' || donationType === 'Cash' ?\r\n          <div>\r\n            <div>\r\n              <h3 className='sidebar-donor-data'>₱{currentAmount}</h3>\r\n              <p className='sidebar-donor-text'>Total Raise</p>\r\n            </div>\r\n            <div>\r\n              <h3 className='sidebar-donor-data'>₱{totalAmount}</h3>\r\n              <p className='sidebar-donor-text'>Target Amount</p>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n          : ''}\r\n\r\n        {donationType === 'Both' || donationType === 'In-Kind' ?\r\n\r\n          <div>\r\n            <h3 className='sidebar-donor-data'>&nbsp;&nbsp;{itemQuantity}</h3>\r\n            <p className='sidebar-donor-text'>&nbsp;Items Donated</p>\r\n          </div>\r\n\r\n          : ''}\r\n\r\n\r\n\r\n\r\n        <div>\r\n          <h3 className='sidebar-donor-data'>&nbsp;&nbsp;{totalDonors}</h3>\r\n          <p className='sidebar-donor-text'>&nbsp;&nbsp;Donors</p>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <Button variant=\"contained\" color=\"primary\" style={{ margin: '20px 0 0 5px' }} onClick={handleClickOpen}>Donate Now</Button>\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n      <div className='button-donor-list'>\r\n        <p>\r\n          {props.children}\r\n          <div className='shadow-container' style={{\r\n              margin: 0,\r\n              padding: 5,\r\n              maxHeight: 250,\r\n              overflowY: 'scroll'\r\n            }}>\r\n          {donorList.map(donor => \r\n            <div className='shadow-container' style={{\r\n              margin: '10px 1px',\r\n              padding: '5px 10px',\r\n            }}>\r\n              <p>{donor.donorName}</p>\r\n              <p>{donor.remarks}</p>\r\n              <p>{donor.amount}</p>\r\n            </div>\r\n            )}\r\n            </div>\r\n        </p>\r\n       \r\n      </div>\r\n\r\n      <Dialog open={openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth='sm' fullWidth={true}>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogTitle id=\"form-dialog-title\" style={{ alignSelf: 'center', fontSize: '50px' }}>Donate</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please Fill the Inputs Bellow:\r\n          </DialogContentText>\r\n\r\n\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Name\"\r\n              placeholder=\"(Blank for Anonymous Donation)\"\r\n              type=\"text\"\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, donorName: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n            {donationType === 'Both' &&\r\n              <FormControl\r\n                style={{ marginBottom: '12px' }}\r\n                fullWidth={true}\r\n                component='fieldset'\r\n              >\r\n                <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n\r\n                <RadioGroup\r\n                  aria-label='gender'\r\n                  name='gender1'\r\n                  value={donateForm.donationType}\r\n                  onChange={(e) =>\r\n                    setDonateForm({ ...donateForm, donationType: e.target.value })\r\n                  }\r\n                >\r\n                  <FormControlLabel\r\n                    value='Cash'\r\n                    control={<Radio />}\r\n                    label='Cash'\r\n                  />\r\n\r\n                  <FormControlLabel\r\n                    value='In-Kind'\r\n                    control={<Radio />}\r\n                    label='In-Kind'\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n            }\r\n\r\n\r\n\r\n            <TextField\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"paymentAddress\"\r\n              // inputProps={{ pattern: '[0-9]' }}\r\n              label={donationType === 'Both' ? donateForm.donationType === 'Cash' ? \"Enter type of Payment(Required)\" : 'Where did you donate the item? (Required)' : donationType === 'Cash' ? \"Enter type of Payment (Required)\" : 'Where did you donate the item? (Required)'}\r\n              placeholder={donationType === 'Both' ? donateForm.donationType === 'Cash' ? \"etc. Gcash, Paymaya, BPI\" : 'Address' : donationType === 'Cash' ? \"Etc. Gcash, Paymaya, BPI\" : 'Address'}\r\n              required={true}\r\n              type=\"text\"\r\n              inputProps={{ min: 0 }}\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, paymentAddress: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <TextField\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"amount\"\r\n              // inputProps={{ pattern: '[0-9]' }}\r\n              label={donationType === 'Both' ? donateForm.donationType === 'Cash' ? \"Enter Cash Amount (Required)\" : 'Enter Item Quantity (Required)' : donationType === 'Cash' ? \"Enter Cash Amount (Required)\" : 'Enter Item Quantity (Required)'}\r\n              required={true}\r\n              type=\"number\"\r\n              inputProps={{ min: 0 }}\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, amount: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n            <TextField\r\n\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"email\"\r\n              label=\"Email (Optional)\"\r\n              placeholder=\"For Sending  aCertificate\"\r\n              type=\"email\"\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, email: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Message (Optional)\"\r\n              placeholder=\"Max input 100 characters\"\r\n              rows={4}\r\n              type=\"text\"\r\n              multiline\r\n              fullWidth={true}\r\n              inputProps={{ maxLength: 100 }}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, remarks: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n<ReCAPTCHA\r\n    sitekey=\"6LeZELwaAAAAAJr4hCyldepcnin7DElTijIPY5bv\"\r\n    onChange={handleCaptcha}\r\n  />,\r\n\r\n\r\n\r\n\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n          </Button>\r\n            <Button type=\"submit\" disabled={donateForm.amount === 0 || captcha === false} color=\"primary\">\r\n              Donate\r\n          </Button>\r\n\r\n          </DialogActions>\r\n\r\n        </form>\r\n      </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default SideBarDonor;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerList.jsx",["294","295","296","297","298"],"import React, { useContext, useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Icon,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Radio,\r\n  RadioGroup,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  MenuItem,\r\n  Snackbar,\r\n} from '@material-ui/core/';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { userLedgerAdded, userLedgerAccepted, userLedgerRejected } from '../../../../app/user';\r\nimport { CodeOutlined, LaptopWindows } from '@material-ui/icons';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport route from '../../../../route/instagive'\r\n\r\nfunction LedgerList(props) {\r\n  console.log('ledger here', props.ledger)\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  // Modal\r\n\r\n  const [ledgerForm, setLedgerForm] = useState({\r\n    postId: '',\r\n    donorName: '',\r\n    donationType: 'Cash',\r\n    paymentAddress: '',\r\n    amount: 0,\r\n    remarks: '',\r\n    date: '',\r\n    email: '',\r\n  });\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // if (ledgerForm.postId === 'Select Post' || ledgerForm.postId === '') return alert('Select Post first')\r\n    // if (ledgerForm.date === '') return alert('Select Date first')\r\n\r\n    if (ledgerForm.donorName === '')\r\n      setLedgerForm({ ...ledgerForm, donorName: 'Anonymous' });\r\n\r\n    props.userLedgerAdded(ledgerForm, props.userToken);\r\n\r\n    setLedgerForm({\r\n      postId: '',\r\n      donorName: '',\r\n      donationType: 'Cash',\r\n      paymentAddress: '',\r\n      amount: 0,\r\n      remarks: '',\r\n      date: '',\r\n      email: '',\r\n    });\r\n\r\n    handleClose();\r\n    setOpen(true);\r\n\r\n  };\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = async () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n\r\n  const [openModalPending, setModalPending] = useState(false);\r\n\r\n  const handleClickOpenPending = async () => {\r\n    setModalPending(true);\r\n  };\r\n\r\n  const handleClosePending = () => {\r\n    setModalPending(false);\r\n  };\r\n\r\n\r\n\r\n  const [openModalRejected, setModalRejected] = useState(false);\r\n\r\n  const handleClickOpenRejected = async () => {\r\n    setModalRejected(true);\r\n  };\r\n\r\n  const handleCloseRejected = () => {\r\n    setModalRejected(false);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleApproveLedger = async (ledgerID) => {\r\n    await route.post(`/ledger/${ledgerID}/Approved`, {token: props.userToken})\r\n        document.location.reload();\r\n\r\n  }\r\n\r\n\r\n  const handleRejectLedger = async (ledgerID) => {\r\n    await route.post(`/ledger/${ledgerID}/Rejected`, {token: props.userToken})\r\n    document.location.reload();\r\n  }\r\n\r\n\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={open} autoHideDuration={4000} onClose={handleCloseAlert}>\r\n        <Alert onClose={handleCloseAlert} severity='success'>\r\n          Data Successfully Added\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Button\r\n        style={{ margin: '12px' }}\r\n        onClick={handleClickOpen}\r\n        variant='outlined'\r\n        color='primary'\r\n        endIcon={<AddIcon fontSize='small'></AddIcon>}\r\n      >\r\n        Add Data\r\n      </Button>\r\n\r\n      <Button\r\n        style={{ margin: '10px' }}\r\n        onClick={handleClickOpenPending}\r\n        variant='outlined'\r\n        color='primary'\r\n        endIcon={<HourglassEmptyIcon fontSize='small'></HourglassEmptyIcon>}\r\n      >\r\n        Pending Donates\r\n      </Button>\r\n      <Button\r\n        style={{ margin: '10px' }}\r\n        onClick={handleClickOpenRejected}\r\n        variant='outlined'\r\n        color='secondary'\r\n        endIcon={<DeleteOutlineIcon fontSize='small'></DeleteOutlineIcon>}\r\n      >\r\n        Rejected Donates\r\n      </Button>\r\n\r\n      <Container component='main' maxWidth='xl' className='shadow-container'>\r\n        <div>\r\n          <TextField\r\n            variant='outlined'\r\n            style={{\r\n              width: '50%',\r\n              display: 'relative',\r\n              left: '25%',\r\n              marginBottom: '30px',\r\n            }}\r\n            label='Search Here'\r\n          />\r\n        </div>\r\n\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.ledger.ledgerAccepted &&\r\n                  props.ledger.ledgerAccepted.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Container>\r\n\r\n      {/* Modal */}\r\n\r\n      <Dialog\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='sm'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Add New Data\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={handleSubmit}>\r\n            <DialogContentText>\r\n              Please Fill the Inputs Bellow:\r\n            </DialogContentText>\r\n\r\n            <FormControl\r\n              style={{ marginBottom: '12px' }}\r\n              fullWidth={true}\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel style={{ marginLeft: '12px' }} id='post'>\r\n                Select Post\r\n              </InputLabel>\r\n\r\n              <Select\r\n                required={true}\r\n                variant='outlined'\r\n                label='city'\r\n                name='city'\r\n                id='city'\r\n                fullWidth={true}\r\n                value={ledgerForm.postId}\r\n                onChange={(e) =>\r\n                  setLedgerForm({ ...ledgerForm, postId: e.target.value })\r\n                }\r\n              >\r\n                {props.post &&\r\n                  props.post.map((post) => (\r\n                    <MenuItem key={post._id} value={post._id}>\r\n                      {post.Title}\r\n                    </MenuItem>\r\n                  ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n              style={{ marginBottom: '12px' }}\r\n              fullWidth={true}\r\n              component='fieldset'\r\n            >\r\n              <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n\r\n              <RadioGroup\r\n                aria-label='gender'\r\n                name='gender1'\r\n                value={ledgerForm.donationType}\r\n                onChange={(e) =>\r\n                  setLedgerForm({ ...ledgerForm, donationType: e.target.value })\r\n                }\r\n              >\r\n                <FormControlLabel\r\n                  value='Cash'\r\n                  control={<Radio />}\r\n                  label='Cash'\r\n                />\r\n\r\n                <FormControlLabel\r\n                  value='In-Kind'\r\n                  control={<Radio />}\r\n                  label='In-Kind'\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Donor Name (Optional)'\r\n              type='text'\r\n              name='donorName'\r\n              id='donorName'\r\n              value={ledgerForm.donorName}\r\n              onChange={(e) => {\r\n                setLedgerForm({ ...ledgerForm, donorName: e.target.value });\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Email (Optional)'\r\n              type='text'\r\n              name=''\r\n              id=''\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, email: e.target.value })\r\n              }\r\n            />\r\n\r\n            {ledgerForm.donationType === 'Cash' ? (\r\n              <TextField\r\n                style={{ marginBottom: '12px' }}\r\n                required={true}\r\n                variant='outlined'\r\n                fullWidth={true}\r\n                label='Enter Payment Method(CASH) '\r\n                type='text'\r\n                name='paymentAddress'\r\n                id='paymentAddress'\r\n                value={ledgerForm.paymentAddress}\r\n                onChange={(e) =>\r\n                  setLedgerForm({\r\n                    ...ledgerForm,\r\n                    paymentAddress: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              pattern='[0-9]+'\r\n              required={true}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Amount(Cash) / Item Quantity(In-Kind)'\r\n              type='number'\r\n              name='amount'\r\n              id='amount'\r\n              value={ledgerForm.amount}\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, amount: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              rows={4}\r\n              multiline\r\n              label='Enter Remarks'\r\n              type='text'\r\n              name='remarks'\r\n              id='remarks'\r\n              value={ledgerForm.remarks}\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, remarks: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              required={true}\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              type='date'\r\n              onChange={(date) => {\r\n                setLedgerForm({ ...ledgerForm, date: date.target.value });\r\n              }}\r\n            />\r\n\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n              <Button\r\n                type='submit'\r\n                disabled={ledgerForm.amount === 0}\r\n                color='primary'\r\n              >\r\n                Donate\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n{/* Pending */}\r\n<Dialog\r\n        open={openModalPending}\r\n        onClose={handleClosePending}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='large'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Pending Donates\r\n        </DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n             Approved / Reject Donates\r\n            </DialogContentText>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                  <StyledTableCell align='center'>UPDATE</StyledTableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              \r\n              {/* Loop ALl Pending */}\r\n                {props.ledger.ledgerList &&\r\n                  props.ledger.ledgerList.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                      <Button variant=\"contained\"\r\n                       endIcon={<CheckIcon></CheckIcon>} \r\n                       fullWidth={true} \r\n                       color=\"primary\"\r\n                       onClick={() => handleApproveLedger(data._id)}\r\n                       ></Button>\r\n                      <Button variant=\"contained\"\r\n                       endIcon={<ClearIcon></ClearIcon>} \r\n                       fullWidth={true} \r\n                       color=\"secondary\"\r\n                       onClick={() => handleRejectLedger(data._id)}\r\n                       ></Button>\r\n\r\n                      \r\n                      </StyledTableCell>\r\n                 \r\n                 \r\n                 \r\n                 \r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              \r\n            <DialogActions>\r\n              <Button onClick={handleClosePending} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n\r\n        \r\n            </DialogActions>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* Rejected Donates */}\r\n\r\n<Dialog\r\n        open={openModalRejected}\r\n        onClose={handleCloseRejected}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='large'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Rejected Donates\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n            \r\n\r\n\r\n\r\n\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              \r\n              {/* Loop ALl Pending */}\r\n                {props.ledger.ledgerRejected &&\r\n                  props.ledger.ledgerRejected.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                 \r\n                 \r\n                 \r\n                 \r\n                 \r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <DialogActions>\r\n              <Button onClick={handleCloseRejected} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n\r\n        \r\n            </DialogActions>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const ledgerList = state.user.ledger.filter(donate => donate.status !== 'Approved' && donate.status !== 'Rejected')\r\n  const ledgerAccepted = state.user.ledger.filter(donate => donate.status === 'Approved')\r\n  const ledgerRejected = state.user.ledger.filter(donate => donate.status === 'Rejected')\r\n  return {\r\n    ledger: {ledgerList, ledgerAccepted, ledgerRejected},\r\n    post: state.user.post,\r\n    userToken: state.auth.token,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { userLedgerAdded, userLedgerAccepted, userLedgerRejected })(LedgerList);\r\n",{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":1,"column":28,"nodeType":"305","messageId":"306","endLine":1,"endColumn":36},{"ruleId":"307","severity":1,"message":"308","line":43,"column":6,"nodeType":"309","endLine":43,"endColumn":8,"suggestions":"310"},{"ruleId":"311","severity":1,"message":"312","line":42,"column":1,"nodeType":"313","endLine":65,"endColumn":2},{"ruleId":"303","severity":1,"message":"314","line":19,"column":7,"nodeType":"305","messageId":"306","endLine":19,"endColumn":20},{"ruleId":"303","severity":1,"message":"315","line":26,"column":7,"nodeType":"305","messageId":"306","endLine":26,"endColumn":22},{"ruleId":"303","severity":1,"message":"316","line":33,"column":7,"nodeType":"305","messageId":"306","endLine":33,"endColumn":22},{"ruleId":"311","severity":1,"message":"312","line":43,"column":1,"nodeType":"313","endLine":61,"endColumn":2},{"ruleId":"311","severity":1,"message":"312","line":35,"column":1,"nodeType":"313","endLine":52,"endColumn":2},{"ruleId":"303","severity":1,"message":"317","line":6,"column":10,"nodeType":"305","messageId":"306","endLine":6,"endColumn":20},{"ruleId":"303","severity":1,"message":"318","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":24},{"ruleId":"307","severity":1,"message":"308","line":12,"column":6,"nodeType":"309","endLine":12,"endColumn":8,"suggestions":"319"},{"ruleId":"303","severity":1,"message":"320","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":25},{"ruleId":"303","severity":1,"message":"321","line":13,"column":10,"nodeType":"305","messageId":"306","endLine":13,"endColumn":18},{"ruleId":"303","severity":1,"message":"322","line":9,"column":12,"nodeType":"305","messageId":"306","endLine":9,"endColumn":22},{"ruleId":"303","severity":1,"message":"323","line":9,"column":24,"nodeType":"305","messageId":"306","endLine":9,"endColumn":37},{"ruleId":"307","severity":1,"message":"324","line":21,"column":8,"nodeType":"309","endLine":21,"endColumn":10,"suggestions":"325"},{"ruleId":"307","severity":1,"message":"308","line":21,"column":8,"nodeType":"309","endLine":21,"endColumn":26,"suggestions":"326"},{"ruleId":"303","severity":1,"message":"327","line":73,"column":7,"nodeType":"305","messageId":"306","endLine":73,"endColumn":22},{"ruleId":"311","severity":1,"message":"312","line":103,"column":1,"nodeType":"313","endLine":151,"endColumn":2},{"ruleId":"303","severity":1,"message":"328","line":3,"column":9,"nodeType":"305","messageId":"306","endLine":3,"endColumn":15},{"ruleId":"303","severity":1,"message":"329","line":3,"column":17,"nodeType":"305","messageId":"306","endLine":3,"endColumn":24},{"ruleId":"303","severity":1,"message":"330","line":3,"column":26,"nodeType":"305","messageId":"306","endLine":3,"endColumn":36},{"ruleId":"331","severity":1,"message":"332","line":26,"column":13,"nodeType":"333","endLine":26,"endColumn":91},{"ruleId":"331","severity":1,"message":"332","line":27,"column":13,"nodeType":"333","endLine":27,"endColumn":71},{"ruleId":"303","severity":1,"message":"334","line":6,"column":10,"nodeType":"305","messageId":"306","endLine":6,"endColumn":14},{"ruleId":"303","severity":1,"message":"304","line":1,"column":17,"nodeType":"305","messageId":"306","endLine":1,"endColumn":25},{"ruleId":"303","severity":1,"message":"335","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":19},{"ruleId":"303","severity":1,"message":"336","line":4,"column":8,"nodeType":"305","messageId":"306","endLine":4,"endColumn":15},{"ruleId":"303","severity":1,"message":"337","line":5,"column":8,"nodeType":"305","messageId":"306","endLine":5,"endColumn":16},{"ruleId":"303","severity":1,"message":"338","line":6,"column":8,"nodeType":"305","messageId":"306","endLine":6,"endColumn":24},{"ruleId":"303","severity":1,"message":"339","line":7,"column":8,"nodeType":"305","messageId":"306","endLine":7,"endColumn":18},{"ruleId":"303","severity":1,"message":"340","line":1,"column":8,"nodeType":"305","messageId":"306","endLine":1,"endColumn":13},{"ruleId":"303","severity":1,"message":"317","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":20},{"ruleId":"341","severity":1,"message":"342","line":132,"column":11,"nodeType":"343","endLine":132,"endColumn":26},{"ruleId":"303","severity":1,"message":"330","line":18,"column":8,"nodeType":"305","messageId":"306","endLine":18,"endColumn":18},{"ruleId":"303","severity":1,"message":"317","line":19,"column":10,"nodeType":"305","messageId":"306","endLine":19,"endColumn":20},{"ruleId":"303","severity":1,"message":"335","line":20,"column":8,"nodeType":"305","messageId":"306","endLine":20,"endColumn":19},{"ruleId":"303","severity":1,"message":"344","line":55,"column":9,"nodeType":"305","messageId":"306","endLine":55,"endColumn":16},{"ruleId":"307","severity":1,"message":"345","line":27,"column":8,"nodeType":"309","endLine":27,"endColumn":20,"suggestions":"346"},{"ruleId":"347","severity":1,"message":"348","line":21,"column":11,"nodeType":"333","endLine":21,"endColumn":142},{"ruleId":"303","severity":1,"message":"320","line":11,"column":10,"nodeType":"305","messageId":"306","endLine":11,"endColumn":25},{"ruleId":"303","severity":1,"message":"349","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":22},{"ruleId":"303","severity":1,"message":"350","line":14,"column":8,"nodeType":"305","messageId":"306","endLine":14,"endColumn":12},{"ruleId":"303","severity":1,"message":"351","line":21,"column":3,"nodeType":"305","messageId":"306","endLine":21,"endColumn":14},{"ruleId":"303","severity":1,"message":"352","line":6,"column":3,"nodeType":"305","messageId":"306","endLine":6,"endColumn":14},{"ruleId":"303","severity":1,"message":"353","line":7,"column":3,"nodeType":"305","messageId":"306","endLine":7,"endColumn":13},{"ruleId":"303","severity":1,"message":"354","line":8,"column":3,"nodeType":"305","messageId":"306","endLine":8,"endColumn":9},{"ruleId":"303","severity":1,"message":"355","line":11,"column":3,"nodeType":"305","messageId":"306","endLine":11,"endColumn":11},{"ruleId":"303","severity":1,"message":"356","line":25,"column":22,"nodeType":"305","messageId":"306","endLine":25,"endColumn":32},{"ruleId":"303","severity":1,"message":"357","line":71,"column":10,"nodeType":"305","messageId":"306","endLine":71,"endColumn":17},{"ruleId":"303","severity":1,"message":"358","line":76,"column":9,"nodeType":"305","messageId":"306","endLine":76,"endColumn":26},{"ruleId":"347","severity":1,"message":"348","line":146,"column":17,"nodeType":"333","endLine":150,"endColumn":19},{"ruleId":"303","severity":1,"message":"359","line":44,"column":10,"nodeType":"305","messageId":"306","endLine":44,"endColumn":16},{"ruleId":"303","severity":1,"message":"360","line":44,"column":18,"nodeType":"305","messageId":"306","endLine":44,"endColumn":27},{"ruleId":"303","severity":1,"message":"334","line":2,"column":10,"nodeType":"305","messageId":"306","endLine":2,"endColumn":14},{"ruleId":"303","severity":1,"message":"330","line":4,"column":32,"nodeType":"305","messageId":"306","endLine":4,"endColumn":42},{"ruleId":"303","severity":1,"message":"361","line":3,"column":10,"nodeType":"305","messageId":"306","endLine":3,"endColumn":16},{"ruleId":"303","severity":1,"message":"362","line":28,"column":11,"nodeType":"305","messageId":"306","endLine":28,"endColumn":27},{"ruleId":"303","severity":1,"message":"340","line":4,"column":8,"nodeType":"305","messageId":"306","endLine":4,"endColumn":13},{"ruleId":"347","severity":1,"message":"348","line":172,"column":11,"nodeType":"333","endLine":172,"endColumn":135},{"ruleId":"303","severity":1,"message":"363","line":2,"column":25,"nodeType":"305","messageId":"306","endLine":2,"endColumn":33},{"ruleId":"303","severity":1,"message":"344","line":96,"column":9,"nodeType":"305","messageId":"306","endLine":96,"endColumn":16},{"ruleId":"307","severity":1,"message":"364","line":146,"column":6,"nodeType":"309","endLine":146,"endColumn":18,"suggestions":"365"},{"ruleId":"303","severity":1,"message":"366","line":69,"column":11,"nodeType":"305","messageId":"306","endLine":69,"endColumn":15},{"ruleId":"303","severity":1,"message":"367","line":12,"column":10,"nodeType":"305","messageId":"306","endLine":12,"endColumn":17},{"ruleId":"303","severity":1,"message":"368","line":14,"column":8,"nodeType":"305","messageId":"306","endLine":14,"endColumn":12},{"ruleId":"303","severity":1,"message":"344","line":44,"column":9,"nodeType":"305","messageId":"306","endLine":44,"endColumn":16},{"ruleId":"303","severity":1,"message":"369","line":59,"column":11,"nodeType":"305","messageId":"306","endLine":59,"endColumn":17},{"ruleId":"307","severity":1,"message":"370","line":69,"column":6,"nodeType":"309","endLine":69,"endColumn":8,"suggestions":"371"},{"ruleId":"303","severity":1,"message":"372","line":132,"column":9,"nodeType":"305","messageId":"306","endLine":132,"endColumn":25},{"ruleId":"303","severity":1,"message":"373","line":1,"column":17,"nodeType":"305","messageId":"306","endLine":1,"endColumn":27},{"ruleId":"303","severity":1,"message":"374","line":2,"column":8,"nodeType":"305","messageId":"306","endLine":2,"endColumn":18},{"ruleId":"303","severity":1,"message":"350","line":16,"column":3,"nodeType":"305","messageId":"306","endLine":16,"endColumn":7},{"ruleId":"303","severity":1,"message":"375","line":36,"column":10,"nodeType":"305","messageId":"306","endLine":36,"endColumn":22},{"ruleId":"303","severity":1,"message":"376","line":36,"column":24,"nodeType":"305","messageId":"306","endLine":36,"endColumn":37},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["379"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'postListAdded' is assigned a value but never used.","'postListRemoved' is assigned a value but never used.","'postListUpdated' is assigned a value but never used.","'makeStyles' is defined but never used.","'CircularProgress' is defined but never used.",["380"],"'FontAwesomeIcon' is defined but never used.","'faFilter' is defined but never used.","'userAuthID' is assigned a value but never used.","'setUserAuthID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["381"],["382"],"'userPostRemoved' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Link' is defined but never used.","'CssBaseline' is defined but never used.","'imgWave' is defined but never used.","'orgPhoto' is defined but never used.","'unknownUserPhoto' is defined but never used.","'checkPhoto' is defined but never used.","'axios' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["383"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'faPlusCircle' is defined but never used.","'Icon' is defined but never used.","'DialogTitle' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'withStyles' is defined but never used.","'orgList' is assigned a value but never used.","'handleGetUserPost' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'faEdit' is defined but never used.","'handleEditButton' is assigned a value but never used.","'Redirect' is defined but never used.","React Hook useEffect has missing dependencies: 'props.authToken' and 'props.match.params.id'. Either include them or remove the dependency array.",["384"],"'data' is assigned a value but never used.","'connect' is defined but never used.","'List' is defined but never used.","'postId' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_id' and 'props.match.params.id'. Either include them or remove the dependency array.",["385"],"'handleClickAlert' is assigned a value but never used.","'useContext' is defined but never used.","'DatePicker' is defined but never used.","'CodeOutlined' is defined but never used.","'LaptopWindows' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"386","fix":"387"},{"desc":"386","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"desc":"395","fix":"396"},{"desc":"397","fix":"398"},"Update the dependencies array to be: [props]",{"range":"399","text":"400"},{"range":"401","text":"400"},"Update the dependencies array to be: [props.history]",{"range":"402","text":"403"},"Update the dependencies array to be: [props, props.auth.token]",{"range":"404","text":"405"},"Update the dependencies array to be: [props.match.params.id, props.post]",{"range":"406","text":"407"},"Update the dependencies array to be: [props.authToken, props.match.params.id, props.post]",{"range":"408","text":"409"},"Update the dependencies array to be: [_id, props.match.params.id]",{"range":"410","text":"411"},[1504,1506],"[props]",[404,406],[674,676],"[props.history]",[804,822],"[props, props.auth.token]",[738,750],"[props.match.params.id, props.post]",[3096,3108],"[props.authToken, props.match.params.id, props.post]",[1849,1851],"[_id, props.match.params.id]"]