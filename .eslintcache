[{"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\index.jsx":"1","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\configStore.js":"2","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\App.jsx":"3","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\reducer.js":"4","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\postList.js":"5","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\accounts.js":"6","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\auth.js":"7","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\NotFound.jsx":"8","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Nav.jsx":"9","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\EmailLoginPage.jsx":"10","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\LandingPage.jsx":"11","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPage.jsx":"12","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\AllPostList.jsx":"13","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\AuthPage.jsx":"14","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPage.jsx":"15","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\UserPage.jsx":"16","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\user.js":"17","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\route\\instagive.js":"18","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Footer.jsx":"19","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\ShowContent.jsx":"20","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Content.jsx":"21","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Posts.jsx":"22","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPageContent.jsx":"23","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsUpdatePage.jsx":"24","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Login.jsx":"25","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Register.jsx":"26","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\ForgotPass.jsx":"27","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Sidebar.jsx":"28","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminAccepted.jsx":"29","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminRejected.jsx":"30","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPending.jsx":"31","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLogin.jsx":"32","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\PostList.jsx":"33","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\UpdateUserPost.jsx":"34","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\changePassPage\\ChangePass.jsx":"35","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreate.jsx":"36","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\UserPostDetails.jsx":"37","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerPage.jsx":"38","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\PostCard.jsx":"39","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\SideBarDonor.jsx":"40","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\others\\cityLocation.js":"41","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerCreate.jsx":"42","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerList.jsx":"43","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreateDetails.jsx":"44","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostCreateUpdate.jsx":"45","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostDetailUpdate.jsx":"46","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLedgers.jsx":"47","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPost.jsx":"48"},{"size":418,"mtime":1615127977598,"results":"49","hashOfConfig":"50"},{"size":181,"mtime":1615043413061,"results":"51","hashOfConfig":"50"},{"size":2253,"mtime":1615903663531,"results":"52","hashOfConfig":"50"},{"size":252,"mtime":1615043413063,"results":"53","hashOfConfig":"50"},{"size":1315,"mtime":1615043413062,"results":"54","hashOfConfig":"50"},{"size":1819,"mtime":1615043413060,"results":"55","hashOfConfig":"50"},{"size":950,"mtime":1615043413060,"results":"56","hashOfConfig":"50"},{"size":385,"mtime":1615043413065,"results":"57","hashOfConfig":"50"},{"size":5003,"mtime":1616336205618,"results":"58","hashOfConfig":"50"},{"size":547,"mtime":1616336205630,"results":"59","hashOfConfig":"50"},{"size":423,"mtime":1615397166050,"results":"60","hashOfConfig":"50"},{"size":1820,"mtime":1615903663537,"results":"61","hashOfConfig":"50"},{"size":3889,"mtime":1618068845734,"results":"62","hashOfConfig":"50"},{"size":1404,"mtime":1615043413072,"results":"63","hashOfConfig":"50"},{"size":2511,"mtime":1616337210552,"results":"64","hashOfConfig":"50"},{"size":1658,"mtime":1615273999592,"results":"65","hashOfConfig":"50"},{"size":4106,"mtime":1616307276683,"results":"66","hashOfConfig":"50"},{"size":100,"mtime":1615043413093,"results":"67","hashOfConfig":"50"},{"size":872,"mtime":1615422686713,"results":"68","hashOfConfig":"50"},{"size":1203,"mtime":1618014772696,"results":"69","hashOfConfig":"50"},{"size":4947,"mtime":1618020370734,"results":"70","hashOfConfig":"50"},{"size":880,"mtime":1616682102102,"results":"71","hashOfConfig":"50"},{"size":1738,"mtime":1618068874625,"results":"72","hashOfConfig":"50"},{"size":1833,"mtime":1618068880447,"results":"73","hashOfConfig":"50"},{"size":3589,"mtime":1615364850871,"results":"74","hashOfConfig":"50"},{"size":15779,"mtime":1615396952127,"results":"75","hashOfConfig":"50"},{"size":3402,"mtime":1615364353701,"results":"76","hashOfConfig":"50"},{"size":508,"mtime":1615043413066,"results":"77","hashOfConfig":"50"},{"size":3054,"mtime":1615043413070,"results":"78","hashOfConfig":"50"},{"size":1526,"mtime":1615043413072,"results":"79","hashOfConfig":"50"},{"size":3056,"mtime":1615043413071,"results":"80","hashOfConfig":"50"},{"size":2819,"mtime":1615131885970,"results":"81","hashOfConfig":"50"},{"size":11424,"mtime":1618068778641,"results":"82","hashOfConfig":"50"},{"size":544,"mtime":1615043413088,"results":"83","hashOfConfig":"50"},{"size":4044,"mtime":1615132128407,"results":"84","hashOfConfig":"50"},{"size":504,"mtime":1615043413085,"results":"85","hashOfConfig":"50"},{"size":8911,"mtime":1618068858601,"results":"86","hashOfConfig":"50"},{"size":534,"mtime":1615043413084,"results":"87","hashOfConfig":"50"},{"size":3135,"mtime":1618068808341,"results":"88","hashOfConfig":"50"},{"size":10191,"mtime":1616081650547,"results":"89","hashOfConfig":"50"},{"size":418,"mtime":1615043413069,"results":"90","hashOfConfig":"50"},{"size":4755,"mtime":1615192601748,"results":"91","hashOfConfig":"50"},{"size":23983,"mtime":1616307276684,"results":"92","hashOfConfig":"50"},{"size":8433,"mtime":1615367403369,"results":"93","hashOfConfig":"50"},{"size":455,"mtime":1615043413087,"results":"94","hashOfConfig":"50"},{"size":6454,"mtime":1618068850637,"results":"95","hashOfConfig":"50"},{"size":8792,"mtime":1616345881230,"results":"96","hashOfConfig":"50"},{"size":15608,"mtime":1618068864366,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"w933ur",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"100"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"100"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"100"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\index.jsx",[],["218","219"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\configStore.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\App.jsx",["220","221"],"import React, { useEffect, useState } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { postListFeched } from './app/postList'\r\nimport { accountFetched } from './app/accounts'\r\nimport { authAdd } from './app/auth'\r\nimport Nav from './components/common/Nav';\r\n\r\nimport LandingPage from './components/pages/landingPage/LandingPage';\r\nimport DetailsPage from './components/pages/detailsPage/DetailsPage';\r\nimport AuthPage from './components/pages/authPage/AuthPage';\r\nimport UserPage from './components/pages/userPage/UserPage';\r\nimport AdminPage from './components/pages/adminPage/AdminPage';\r\nimport NotFound from './components/common/NotFound';\r\nimport './App.css';\r\nimport AllPostList from './components/pages/landingPage/AllPostList';\r\nimport EmailLoginPage from './components/pages/EmailLoginPage';\r\n\r\n\r\nfunction App(props) {\r\n\r\n  useEffect(() => {\r\n    const getAllData = async () => {\r\n      props.accountFetched()\r\n      props.postListFeched()\r\n    };\r\n\r\n    const validateAuthID = async () => {\r\n      // Validating if token is valid\r\n      // await axios.post('/checkusertoken', token)\r\n\r\n      props.authAdd(token, type)\r\n    }\r\n\r\n    // check if there's a user in local storage\r\n    const token = localStorage.getItem('user') || localStorage.getItem('admin')\r\n    const type = localStorage.key(token)\r\n\r\n    validateAuthID()\r\n    getAllData();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Nav />\r\n      <Switch>\r\n        <Route path='/login/email/:token' component={EmailLoginPage} />\r\n        <Route path='/post-list' component={AllPostList} />\r\n        <Route path='/details/:id' component={DetailsPage} />\r\n        <Route path='/auth' component={AuthPage} />\r\n        <Route path='/user' component={UserPage} />\r\n        <Route path='/not-found' component={NotFound} />\r\n        <Route path='/admin' component={AdminPage} />\r\n        <Route path='/' exact component={LandingPage} />\r\n        <Redirect to='/not-found' />\r\n      </Switch>\r\n   \r\n   <div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return { state }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n  { authAdd, postListFeched, accountFetched })(App);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\reducer.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\postList.js",["222","223","224","225"],"import route from '../route/instagive'\r\n\r\n// Action Type\r\nconst POST_LIST_FECHED = 'postListFeched'\r\nconst POST_LIST_ADDED = 'postListAdded'\r\nconst POST_LIST_REMOVED = 'postListRemoved'\r\nconst POST_LIST_UPDATED = 'postListUpdated'\r\n\r\n\r\n// Action\r\nexport const postListFeched = () => async dispatch => {\r\n    const {data} = await route.get('/landing')\r\n    dispatch({\r\n        type: POST_LIST_FECHED,\r\n        payload: data\r\n    })\r\n}\r\n\r\nconst postListAdded = (post) => {\r\n    return {\r\n        type: POST_LIST_ADDED,\r\n        payload: post\r\n    }\r\n}\r\n\r\nconst postListRemoved = (id) => {\r\n    return {\r\n        type: POST_LIST_REMOVED,\r\n        payload: {id}\r\n    }\r\n}\r\n\r\nconst postListUpdated = (post) => {\r\n    return {\r\n        type: POST_LIST_UPDATED,\r\n        payload: post\r\n    }\r\n}\r\n\r\n\r\n\r\n// Reducer\r\nexport default (state=[], action) => {\r\n    switch (action.type) {\r\n        case POST_LIST_FECHED:\r\n            return action.payload\r\n    \r\n        case POST_LIST_REMOVED:\r\n            return state.filter(post => \r\n                post._id !== action.payload.id)\r\n    \r\n        case POST_LIST_UPDATED:\r\n            return state.map(post =>\r\n                post._id === action.payload.id ?\r\n                action.payload :\r\n                post)\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\accounts.js",["226"],"import route from '../route/instagive'\r\n\r\n// Action Type\r\nconst ACCOUNT_FETCHED = 'accountFetched'\r\nconst ACCOUNT_APPROVED = 'accountApproved'\r\nconst ACCOUNT_REJECTED = 'accountRejected'\r\n\r\n\r\n// Actions\r\nconst accountFetched = () => async dispatch => {\r\n    const {data} = await route.get('/admin/getusers')\r\n\r\n    dispatch({\r\n        type:ACCOUNT_FETCHED,\r\n        payload: data\r\n    })\r\n}\r\n\r\nconst accountApproved = account => async dispatch => {\r\n    await route.post(`/admin/changestatus/${account._id}/approved`)\r\n    dispatch({\r\n        type:ACCOUNT_APPROVED,\r\n        payload: account\r\n    })\r\n}\r\n\r\nconst accountRejected = account => async dispatch => {\r\n    await route.post(`/admin/changestatus/${account._id}/rejected`)\r\n    dispatch({\r\n        type:ACCOUNT_REJECTED,\r\n        payload: account\r\n    })\r\n}\r\n\r\n\r\nconst accountList = {\r\n    pending: [],\r\n    approved: [],\r\n    rejected: []\r\n}\r\n// Reducer\r\nexport default (state=accountList, action) => {\r\n    switch (action.type) {\r\n        case ACCOUNT_FETCHED:\r\n            return action.payload\r\n    \r\n        case ACCOUNT_APPROVED:\r\n            return {\r\n                ...state,\r\n                pending: state.pending.filter(account => account._id !== action.payload._id),\r\n                approved: [...state.approved, action.payload]\r\n            }\r\n        \r\n        case ACCOUNT_REJECTED:\r\n            return {\r\n                ...state,\r\n                pending: state.pending.filter(account => account._id !== action.payload._id),\r\n                approved: state.approved.filter(account => account._id !== action.payload._id),\r\n                rejected: [...state.approved, action.payload]\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {\r\n    accountFetched,\r\n    accountApproved,\r\n    accountRejected\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\auth.js",["227"],"// Action Type\r\nconst AUTH_ADDED = 'authAdded'\r\nconst AUTH_REMOVED = 'authRemoved'\r\n\r\n// Actions\r\nconst authAdd = (token, type) => {\r\n    return {\r\n        type: AUTH_ADDED,\r\n        payload: {\r\n            token,\r\n            type\r\n        }\r\n    }\r\n}\r\n\r\nconst authRemove = () => {\r\n    return {\r\n        type: AUTH_REMOVED,\r\n        payload: {\r\n            token: '',\r\n            type: ''\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Data\r\nconst authData = {\r\n    token: '',\r\n    type: ''\r\n}\r\n\r\n\r\n// Reducer\r\nexport default (auth=authData, action) => {\r\n    switch (action.type) {\r\n        case AUTH_ADDED:\r\n            return {\r\n                token: action.payload.token,\r\n                type: action.payload.type\r\n            }\r\n        \r\n        case AUTH_REMOVED:\r\n            return {\r\n                token: '',\r\n                type: ''\r\n            }\r\n\r\n        default:\r\n            return auth\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    authAdd,\r\n    authRemove\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\NotFound.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Nav.jsx",["228"],"import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\nimport { authRemove } from '../../app/auth'\r\nimport logo from '../../img/Instagive-logo-2.png'\r\nimport '../../style/common/Nav.css'\r\n\r\nfunction Nav(props) {\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <nav className=\"navBar\">\r\n            <span>\r\n                <Link to=\"/\" className='navLogo'>\r\n                    <img src={logo} alt=\"logo\" height='45px' className='logo' style={{ marginRight: 10 }} />\r\n                    <p className='navLogoName'>InstaGive</p>\r\n                </Link>\r\n                <span>\r\n                    {/* Other nav links */}\r\n                </span>\r\n            </span>\r\n            <span className='navLogin'>\r\n                {props.auth.token ?\r\n                    <span>\r\n                        {props.auth.type === 'user' || localStorage.getItem('user') ?\r\n                            <span>\r\n                                <div>\r\n                                    <IconButton\r\n                                        aria-label=\"account of current user\"\r\n                                        aria-controls=\"menu-appbar\"\r\n                                        aria-haspopup=\"true\"\r\n                                        onClick={handleMenu}\r\n                                        color=\"inherit\"\r\n                                    >\r\n                                        <AccountCircle fontSize='large' />\r\n                                    </IconButton>\r\n                                    <Menu\r\n                                        id=\"menu-appbar\"\r\n                                        anchorEl={anchorEl}\r\n                                        anchorOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right',\r\n                                        }}\r\n                                        keepMounted\r\n                                        transformOrigin={{\r\n                                            vertical: 'top',\r\n                                            horizontal: 'right',\r\n                                        }}\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                    >\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user/ledger\" className='navLink'>Ledger</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user\" className='navLink'>Dashboard</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to=\"/user/change-password\" className='navLink'>ChangePassword</NavLink>\r\n                                        </MenuItem>\r\n                                        <MenuItem>\r\n                                            <NavLink to='/' className='navLink' onClick={() => {\r\n                                                localStorage.removeItem('user')\r\n                                                localStorage.removeItem('admin')\r\n                                                props.authRemove()\r\n                                            }}>Logout</NavLink>\r\n                                        </MenuItem>\r\n                                    </Menu>\r\n                                </div>\r\n                            </span> :\r\n                            <NavLink to='/' className='navLink' onClick={() => {\r\n                                localStorage.removeItem('user')\r\n                                localStorage.removeItem('admin')\r\n                                props.authRemove()\r\n                            }}>Logout</NavLink>\r\n                        }\r\n                    </span> :\r\n                    <span>\r\n                        <NavLink to=\"/auth/register\" className='navLink'>Signup</NavLink>\r\n                        |\r\n                        <NavLink to=\"/auth/login\" className='navLink'>Login</NavLink>\r\n                    </span>\r\n                }\r\n            </span>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { auth: state.auth }\r\n}\r\n\r\nexport default connect(mapStateToProps, { authRemove })(Nav);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\EmailLoginPage.jsx",["229","230"],"import React, { useEffect } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { connect } from 'react-redux';\r\nimport { authAdd } from '../../app/auth';\r\n\r\nfunction EmailLoginPage(props) {\r\n  useEffect(() => {\r\n    const token = props.match.params.token\r\n    props.authAdd(token, 'user')\r\n    localStorage.setItem('user', token)\r\n    props.history.push('/')\r\n  }, [])\r\n\r\n  return (\r\n    <div className='postCardContainer'>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(null, { authAdd })(EmailLoginPage);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\LandingPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\AllPostList.jsx",["231","232"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\AuthPage.jsx",["233","234","235"],"import React, { useEffect, useState } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport Login from './Login';\r\nimport Register from './Register';\r\nimport ForgotPass from './ForgotPass';\r\nimport '../../../style/authPage/authPage.css'\r\n\r\nfunction AuthPage(props) {\r\n    const [userAuthID, setUserAuthID] = useState()\r\n\r\n    useEffect(() => {\r\n        // check if there's a user in coockies\r\n        const userAuthID = localStorage.getItem('user')\r\n\r\n        const validateAuthID = async () => {\r\n            // Same logic for user login\r\n            if (userAuthID) props.history.replace('/user')\r\n        }\r\n\r\n        validateAuthID()\r\n    }, [])\r\n\r\n    return (\r\n        <div className='auth-container'>\r\n            <div className='authBackgroundImage'>\r\n            </div>\r\n            <div className='authForm'>\r\n                <div className='center'>\r\n                    <Switch>\r\n                        <Route path='/auth/login' component={Login} />\r\n                        <Route path='/auth/register' component={Register} />\r\n                        <Route path='/auth/forgot' component={ForgotPass} />\r\n                        <Redirect from='/auth' to='/auth/login' exact />\r\n                        <Redirect to='/not-found' />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AuthPage;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\UserPage.jsx",["236"],"import React, { useEffect } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport PostList from './PostList';\r\nimport LedgerPage from './ledgerPage/LedgerPage';\r\nimport PostCreate from './postDetailPage/PostCreate';\r\nimport UserPostDetails from './postDetailPage/UserPostDetails';\r\nimport ChangePass from './changePassPage/ChangePass';\r\nimport UpdateUserPost from './postUpdatePage/UpdateUserPost';\r\nimport { authRemove } from '../../../app/auth'\r\nimport { userDataFetch } from '../../../app/user'\r\n\r\nfunction UserPage(props) {\r\n    useEffect(() => {\r\n        if (!localStorage.getItem('user')) return props.history.push('/auth')\r\n        if (props.auth.token) {\r\n            props.userDataFetch(props.auth.token)\r\n        }\r\n\r\n    }, [props.auth.token])\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Switch>\r\n                    <Route path='/user/change-password' component={ChangePass} />\r\n                    <Route path='/user/post-create' component={PostCreate} />\r\n                    <Route path='/user/post-details/:id' component={UserPostDetails} />\r\n                    <Route path='/user/ledger' component={LedgerPage} />\r\n                    <Route path='/user/update-details/:id' component={UpdateUserPost} />\r\n                    <Route path='/user/' exact component={PostList} />\r\n                    <Redirect to='/not-found' />\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return state\r\n}\r\n\r\nexport default connect(mapStateToProps, { authRemove, userDataFetch })(UserPage);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\app\\user.js",["237","238"],"import route from '../route/instagive'\r\nimport axios from 'axios'\r\n\r\n// Action Types\r\nconst USER_DATA_FETCH = 'userDataFetch'\r\nconst USER_LEDGER_ADDED = 'userLedgerAdded'\r\nconst USER_LEDGER_REMOVED = 'userLedgerRemoved'\r\nconst USER_LEDGER_UPDATED = 'userLedgerUpdated'\r\n\r\nconst USER_LEDGER_ACCEPTED = 'userLedgerAccepted'\r\nconst USER_LEDGER_REJECTED = 'userLedgerRejected'\r\n\r\nconst USER_POST_ADDED = 'userPostAdded'\r\nconst USER_POST_REMOVED = 'userPostRemoved'\r\nconst USER_POST_UPDATED = 'userPostUpdated'\r\n\r\n\r\n// Action\r\n// Ledger\r\nconst userDataFetch = (token) => async dispatch => {\r\n    const { data: ledger } = await route.post('/ledger/getall', {token})\r\n    const { data: post } = await route.post('/post/userpost', { token })\r\n\r\n    dispatch({\r\n        type: USER_DATA_FETCH,\r\n        payload: {ledger, post} \r\n    })\r\n}\r\n\r\n\r\nconst userLedgerAccepted = (postID) => async dispatch => {\r\n    dispatch({\r\n        type: USER_LEDGER_ACCEPTED,\r\n        payload: {_id: postID}\r\n    })\r\n}\r\nconst userLedgerRejected = (postID) => async dispatch => {\r\n    dispatch({\r\n        type: USER_LEDGER_REJECTED,\r\n        payload: {_id: postID}\r\n    })\r\n}\r\n\r\nconst userLedgerAdded = (ledgerForm, token) => async dispatch => {\r\n    await axios.post(`http://localhost:5000/ledger/${ledgerForm.postId}`, { ...ledgerForm, token })\r\n    let newForm = {...ledgerForm}\r\n    if (!ledgerForm.donorName) newForm = {...newForm, donorName: 'Anonymous'}\r\n    if (!ledgerForm.email) newForm = {...newForm, email: 'None'}\r\n\r\n    dispatch({\r\n        type: USER_LEDGER_ADDED,\r\n        payload: newForm\r\n    })\r\n}\r\n\r\n\r\n// Post\r\nconst userPostAdded = (formdata) => async dispatch => {\r\n    // await route.post('/post/createpost', formdata)\r\n    console.log(...formdata);\r\n    dispatch({\r\n        type: USER_POST_ADDED,\r\n        payload: formdata\r\n    })\r\n}\r\nconst userPostRemoved = () => async dispatch => {\r\n    // await route.post()\r\n\r\n    dispatch({\r\n        type: USER_POST_REMOVED,\r\n        payload: {\r\n\r\n        }\r\n    })\r\n}\r\nconst userPostUpdated = (postForm, postID, userToken) => async dispatch => {\r\n    await route.put(`/post/edit/${postID}`, { ...postForm, token: userToken })\r\n    dispatch({\r\n        type: USER_POST_UPDATED,\r\n        payload: {\r\n            _id: postID,\r\n            ...postForm\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Data\r\nconst userData = {\r\n    ledger: [],\r\n    post: []\r\n}\r\n\r\n\r\n// Reducer\r\nexport default (state=userData, action) => {\r\n    switch (action.type) {\r\n        case USER_DATA_FETCH:\r\n            return action.payload\r\n    \r\n        case USER_LEDGER_ADDED:\r\n            return {...state, ledger: [...state.ledger, action.payload]}\r\n    \r\n        case USER_LEDGER_REMOVED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.filter(ledger => ledger._id !== action.payload._id)\r\n            }\r\n    \r\n        case USER_LEDGER_ACCEPTED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.map(ledger => ledger._id === action.payload._id ? {...ledger, status: 'Approved'} : ledger)\r\n            }\r\n    \r\n        case USER_LEDGER_REJECTED:\r\n            return {\r\n                ...state,\r\n                ledger: state.ledger.map(ledger => ledger._id === action.payload._id ? {...ledger, status: 'Rejected'} : ledger)\r\n            }\r\n    \r\n    \r\n        case USER_LEDGER_UPDATED:\r\n            return state\r\n    \r\n        case USER_POST_ADDED:\r\n            return {...state, post: [...state.post, action.payload]}\r\n    \r\n        case USER_POST_REMOVED:\r\n            return {\r\n                ...state,\r\n                post: state.post.filter(post => post._id !== action.payload._id)\r\n            }\r\n    \r\n        case USER_POST_UPDATED:\r\n            return {\r\n                ...state,\r\n                post: state.post.map(post => post._id === action.payload._id ? {...post, ...action.payload} : post)\r\n            }\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    userDataFetch,\r\n    userLedgerAdded,\r\n\r\n    userPostUpdated,\r\n    userPostAdded,\r\n    \r\n    userLedgerAccepted,\r\n    userLedgerRejected\r\n}","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\route\\instagive.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Footer.jsx",["239","240","241","242"],"import {AppBar, Toolbar, Typography} from '@material-ui/core'\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\n\r\n\r\nconst Footer = () => {\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <div>\r\n   \r\n   <footer style={{display: 'flex', justifyContent:'center' ,background: '#26262b', padding: '30px', color: 'white' }}\r\n   \r\n   \r\n   \r\n   \r\n   \r\n   >\r\n\r\n\r\n<Typography variant=\"h2\" gutterBottom>\r\n    Any Questions? Contact Us! <a href=\"https://www.facebook.com/Instagive-114092927169420\" target=\"_blank\" ><FacebookIcon color=\"primary\" style={{fontSize: '55px'}}></FacebookIcon></a>\r\n    \r\n    <a href=\"mailto:instagive2021@gmail.com\" target=\"_blank\" ><EmailIcon color=\"primary\" style={{fontSize: '55px'}}></EmailIcon></a>\r\n\r\n\r\n      </Typography>\r\n                \r\n\r\n\r\n\r\n\r\n\r\n   </footer>\r\n\r\n  </div>\r\n\r\n)\r\n}\r\n\r\n\r\n\r\n\r\nexport default Footer;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\ShowContent.jsx",["243"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport '../../../style/landingPage/showContent.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction ShowContent(props) {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div id='showcase'>\r\n      <div className='container showcase-container'>\r\n        <div style={{position: 'relative', top: '230px', zIndex: '2'}}>\r\n        <h1 style={{color: 'white'}}>Welcome to InstaGive</h1>\r\n        <p>\r\n          Online donation platform for the residence of Pampanga\r\n        </p>\r\n        <Button\r\n        classes\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          style={{ opacity: 0.9 }}\r\n          color=\"primary\" className={classes.margin}\r\n          onClick={() => props.history.push('/post-list')}>\r\n          Browse Donations\r\n        </Button>\r\n          </div>\r\n       \r\n        \r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShowContent;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Content.jsx",["244","245","246","247"],"import React, { useState } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport imgWave from '../../../img/wave.png';\r\nimport orgPhoto from '../../../img/org-image-content.png';\r\nimport unknownUserPhoto from '../../../img/unknown-user.png';\r\nimport checkPhoto from '../../../img/check.png';\r\nimport { Typography } from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardContent,\r\n  CardActions,\r\n  CardMedia,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from '@material-ui/core/';\r\n\r\nfunction Content(props) {\r\n  const [openModal, setModal] = useState(false);\r\n  const handleClickOpen = async () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const picDetails = [\r\n    {\r\n      imageName: '/aaron.png',\r\n      title: 'aaron',\r\n      alt: 'aaron.png',\r\n      name: 'Aaron Joshua Pangan',\r\n      description: ''\r\n    },\r\n    {\r\n      imageName: '/jabor.png',\r\n      title: 'jabor',\r\n      alt: 'jabor',\r\n      name: 'Joshua Micheal Jabor',\r\n\r\n      description: ''\r\n\r\n    },\r\n    {\r\n      imageName: '/jan.png',\r\n      title: 'jan',\r\n      alt: 'jan',\r\n      name: 'Jan Carlos Dizon',\r\n\r\n      description: ''\r\n\r\n    },\r\n    {\r\n      imageName: '/mich.png',\r\n      title: 'mich',\r\n      alt: 'mich',\r\n      name: 'Michelle Biag',\r\n\r\n      description: ''\r\n\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className='content-container' >\r\n      <img src={imgWave} alt='wave' className='content-wave' />\r\n      <Button\r\n        variant='text'\r\n        onClick={handleClickOpen}\r\n        color='link'\r\n        style={{ fontSize: '2.5rem' }}\r\n      >\r\n        {' '}\r\n        About Us\r\n      </Button>\r\n\r\n      <Dialog\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='lg'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          ABOUT US\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText>WHO WE ARE?:</DialogContentText>\r\n\r\n          <Container>\r\n          \r\n          <div style={{display: 'flex', width:'100%'}} className=\"cards-about-us\">\r\n          {picDetails.map(details => \r\n            <Card className={classes.root} style={{ margin: '20px', width:'100%' }}>\r\n              <CardActionArea>\r\n                <CardMedia\r\n                  component='img'\r\n                  alt={details.alt}\r\n                  height='350'\r\n                  image={details.imageName}\r\n                  title={details.title}\r\n                />\r\n                <CardContent>\r\n                  <Typography\r\n                    color='primary'\r\n                    gutterBottom\r\n                    variant='h7'\r\n                    component='h5'\r\n                  >{details.name}</Typography>\r\n                  <Typography color='textSecondary'></Typography>\r\n                 \r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions></CardActions>\r\n            </Card>\r\n          )}\r\n          </div>\r\n         <Card style={{ margin: '20px' }}>\r\n              <CardActionArea>\r\n               \r\n                <CardContent>\r\n                  <Typography\r\n                    color='primary'\r\n                    gutterBottom\r\n                    variant='h5'\r\n                    component='h2'\r\n                  ></Typography>\r\n                  <Typography color='textSecondary'></Typography>\r\n                  <Typography\r\n                    style={{ height: '110px' }}\r\n                    variant='body2'\r\n                    color='textSecondary'\r\n                    component='p'\r\n                  ></Typography>\r\n                </CardContent>\r\n              </CardActionArea>\r\n              <CardActions></CardActions>\r\n            </Card>\r\n        \r\n          </Container>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\landingPage\\Posts.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsPageContent.jsx",["248","249"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\detailsPage\\DetailsUpdatePage.jsx",["250"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Login.jsx",["251","252","253"],"import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { authAdd } from '../../../app/auth'\r\nimport route from '../../../route/instagive'\r\nimport '../../../style/authPage/login.css';\r\n\r\nimport {TextField, Button, Snackbar} from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\nfunction Login(props) {\r\n  const [auth, setAuth] = useState({ username: '', password: '' });\r\n  const [error, setError] = useState({\r\n\r\n    valid: false,\r\n    msg: '',\r\n    severity: ''\r\n\r\n  });\r\n  \r\n\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { data } = await route.post('/user/login', auth);\r\n\r\n    if (data.valid !== true) {\r\n    \r\n      if(data.valid === 'Credentials Error') \r\n      setError({valid: true, msg: data.valid, severity: 'warning' })\r\n      else  setError({valid: true, msg: data.valid, severity: 'info' })\r\n\r\n\r\n    } else {\r\n      // Set Item\r\n      localStorage.setItem('user', data.token)\r\n      props.authAdd(data.token, 'user')\r\n      props.history.push('/user')\r\n\r\n    }\r\n\r\n    // If there is error in auth, set the error to TRUE\r\n    setAuth({username: '', password: ''})\r\n  };\r\n\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return; \r\n    }\r\n\r\n    setError({...error, valid: false});\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n\r\n\r\n\r\n\r\n    <div className='LoginContainer'>\r\n   \r\n    \r\n   <Snackbar open={error.valid} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={error.severity}>\r\n         {error.msg}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n      <div>\r\n        <h1 className='authTitle'>Welcome!</h1>\r\n\r\n\r\n\r\n      </div>\r\n      <form className='form-container' onSubmit={handleSubmit} >\r\n      \r\n    \r\n\r\n        <TextField\r\n          type='email'\r\n          name='email'\r\n          id='email'\r\n          className='form-input-text'\r\n          margin=\"normal\"\r\n\r\n          variant=\"outlined\"\r\n          label=\"Enter Email\"\r\n          autoFocus\r\n          \r\n          required={true}\r\n          value={auth.username}\r\n          onChange={(e) => setAuth({ ...auth, username: e.target.value })}\r\n        />\r\n    \r\n        <TextField\r\n          \r\n          type='password'\r\n          margin=\"normal\"\r\n          required={true}\r\n          fullWidth\r\n          name='password'\r\n          id='password'\r\n          variant=\"outlined\"\r\n          label=\"Enter Password\"\r\n          className='form-input-text'\r\n          required={true}\r\n          value={auth.password}\r\n          onChange={(e) => setAuth({ ...auth, password: e.target.value })}\r\n        />\r\n        <div style={{ width: '100%' }}>\r\n         <Button variant=\"text\"> <Link to='/auth/forgot' className='form-link'>\r\n            Forgot Password\r\n          </Link> </Button>\r\n          <div className='form-button-container'>\r\n            <Button fullWidth style={{margin: '10px'}} color=\"primary\" variant=\"contained\" type=\"submit\">Login</Button>\r\n           \r\n            <Button  style={{margin: '10px'}} fullWidth variant=\"contained\"\r\n              onClick={() => props.history.push('/auth/register')}\r\n            >\r\n              Sign up\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default connect(null, { authAdd })(Login);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\Register.jsx",["254","255","256"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../../../style/authPage/register.css';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Checkbox,\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Snackbar,\r\n} from '@material-ui/core/';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Register(props) {\r\n  const [checkPassword, setCheckPassword] = useState({ confirm_pass: '' });\r\n  const [userForm, setUserForm] = useState({\r\n    email: '',\r\n    password: '',\r\n    city: '',\r\n    orgName: '',\r\n    orgAddress: '',\r\n\r\n    orgNumber: '',\r\n    repName: '',\r\n\r\n    orgDescriptions: '',\r\n  });\r\n\r\n  const [terms, setTerms] = useState(false);\r\n\r\n  console.log(terms);\r\n\r\n  const [files, setFiles] = useState({\r\n    orgDocuments: '',\r\n    repId: '',\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    console.log(event.target.value);\r\n\r\n    setUserForm({\r\n      ...userForm,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handlerepId = (file) => {\r\n    setFiles({ ...files, repId: file });\r\n  };\r\n\r\n \r\n  const handleorgDocuments = (multifiles) => {\r\n    setFiles({ ...files, orgDocuments: multifiles });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const formdata = new FormData();\r\n\r\n    formdata.append('repId', files.repId);\r\n\r\n    for (const key in files.orgDocuments) {\r\n      formdata.append('orgDocuments', files.orgDocuments[key]);\r\n    }\r\n\r\n    formdata.append('email', userForm.email);\r\n    formdata.append('city', userForm.city);\r\n    formdata.append('password', userForm.password);\r\n\r\n    formdata.append('orgName', userForm.orgName);\r\n    formdata.append('orgAddress', userForm.orgAddress);\r\n    formdata.append('orgNumber', userForm.orgNumber);\r\n    formdata.append('repName', userForm.repName);\r\n    formdata.append('orgDescriptions', userForm.orgDescriptions);\r\n\r\n    const data = await axios.post(\r\n      'http://localhost:5000/user/register',\r\n      formdata\r\n    );\r\n    handleClickAlert();\r\n    console.log(data);\r\n\r\n    setUserForm({\r\n      email: '',\r\n      password: '',\r\n      city: '',\r\n      orgName: '',\r\n      orgAddress: '',\r\n      orgNumber: '',\r\n      repName: '',\r\n      repId: '',\r\n      orgDocuments: [],\r\n      orgDescriptions: '',\r\n    });\r\n\r\n    setCheckPassword({\r\n      confirm_pass: '',\r\n    });\r\n\r\n    setFiles({\r\n    \r\n      orgDocuments: '',\r\n      repId: '',\r\n    });\r\n\r\n    setTerms(false);\r\n\r\n    setListOrgDocuments(0)\r\n    setlistRepId(0)\r\n\r\n    document.getElementById('contained-repID').value = null;\r\n    document.getElementById('contained-button-orgDocuments').value = null;\r\n  };\r\n\r\n  const [snacker, setSnacker] = useState(false);\r\n\r\n  const handleClickAlert = () => {\r\n    setSnacker(true);\r\n  };\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnacker(false);\r\n  };\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n  };\r\n\r\n  const [listOrgDocuments, setListOrgDocuments] = useState('');\r\n  const [listRepId, setlistRepId] = useState('');\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = async () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n  const handleCheckbox = () => {\r\n    setModal(false);\r\n    setTerms(true);\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginLeft: '65px' }} className='register-container'>\r\n      <Snackbar\r\n        open={snacker}\r\n        autoHideDuration={2000}\r\n        onClose={handleCloseAlert}\r\n      >\r\n        <Alert onClose={handleCloseAlert} severity='success'>\r\n          Successfully Requested Account\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Dialog\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='sm'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          TERMS AND CONDITIONS\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>Pleae Read:</DialogContentText>\r\n          <b>1. ACCEPTANCE OF TERMS</b> <br />\r\n          <br />\r\n          Instagive provides the Platform to you (visitors and registered users,\r\n          collectively referred to as the “User”) subject to the following Terms\r\n          and Conditions (collectively, the “Terms”). By using the Platform, you\r\n          agree to be bound by these Terms, our Privacy Policy, all applicable\r\n          laws and all conditions or policies referenced here. <br />\r\n          <br />\r\n          Instagive reserves the right to modify these Terms without notice to\r\n          you, and it is the responsibility of the User to check the Terms\r\n          periodically for any modifications. Continued use of the Platform\r\n          subsequent to the changes mentioned means that you accept the changes\r\n          made.\r\n          <br />\r\n          <br />\r\n          <br />\r\n          <b>2. ELIGIBILITY</b> <br />\r\n          <br />\r\n          2.1 You are not eligible to use the Platform without consent if you\r\n          are under 18 years of age. If you are between the ages of 13 and 17,\r\n          you can use the Platform with the consent and supervision of your\r\n          parent or legal guardian who is at least 18 years old, provided that\r\n          your parent or legal guardian also agrees to be bound by these Terms\r\n          and agrees to be responsible for your use of the Platform.\r\n          <br />\r\n          <br />\r\n          2.2 You are not eligible to use the Platform if you have previously\r\n          been suspended from using the Platform for any reason and we have not\r\n          explicitly authorized you to resume using the Platform.\r\n          <br />\r\n          <br />\r\n          2.3 A representative of an organization is not eligible to use the\r\n          Platform unless they have proper authorization and is capable of\r\n          binding the organization to the Terms.\r\n          <br />\r\n          <br />\r\n          <b>3. PLATFORM ACCESS</b> <br /> <br />\r\n          <br />\r\n          3.1 If the User is eligible (see Sec. 2, of the Terms), the Platform\r\n          is free to use, however starting a Campaign and getting access to\r\n          features such as Creating Post is limited to registered individuals or\r\n          organizations only. You can register by signing up at Instagive.com.\r\n          By signing up as a registered individual or organization, you agree\r\n          to: <br />\r\n          <br />\r\n          1. provide true, accurate, current and complete information about\r\n          yourself, and your organization if applicable, as prompted during the\r\n          signup process, starting a Campaign process and any later\r\n          administration processes (collectively, User Data). <br />\r\n          <br /> 2. maintain and promptly update the User Data to keep it true,\r\n          accurate, current and complete. <br />\r\n          <br /> <br />\r\n          <b>4. LIABILITY</b> <br />\r\n          4.1 Instagive is not responsible for any problems regarding the transaction\r\n          between the Launcher and the Giver. If a problem arises that refunds\r\n          are due, Launchers have the responsibility to provide refunds to\r\n          Givers at their own discretion. <b>The Company will NOT be held liable\r\n          for refunds or lack thereof.</b>\r\n        <br/><br/>\r\n        <b>For other concerns or verifications, please contact us at </b><a href=\"mailto:instagive2021@gmail.com<\">instagive2021@gmail.com</a>\r\n        \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color='primary'>\r\n            Back\r\n          </Button>\r\n          <Button variant='contained' onClick={handleCheckbox} color='primary'>\r\n            Accept and Continue\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <div>\r\n        <h1 className='authTitle'>Account Details</h1>\r\n      </div>\r\n      <form encType='multipart/form-data' onSubmit={handleSubmit}>\r\n        <div className='register-form1'>\r\n          <div className='register-input-container1'>\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              style={{ marginBottom: '12px' }}\r\n              required\r\n              type='email'\r\n              name='email'\r\n              id='email'\r\n              value={userForm.email}\r\n              label='Enter Email'\r\n              className='register-form-input-text'\r\n              onChange={handleChange}\r\n            />\r\n\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              style={{ marginBottom: '12px' }}\r\n              required={true}\r\n              type='password'\r\n              name='password'\r\n              value={userForm.password}\r\n              label='Enter Password'\r\n              className='register-form-input-text'\r\n              onChange={handleChange}\r\n            />\r\n\r\n            <TextField\r\n              required={true}\r\n              variant='outlined'\r\n              color='primary'\r\n              style={{ marginBottom: '12px' }}\r\n              label='Confirm Password'\r\n              value={checkPassword.confirm_pass}\r\n              type='password'\r\n              name='confirm-pass'\r\n              className='register-form-input-text'\r\n              onChange={(e) => setCheckPassword({confirm_pass :e.target.value})}\r\n            />\r\n          </div>\r\n        </div>\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n        <div className='register-form2'>\r\n          <div\r\n            style={{ marginBottom: '12px' }}\r\n            className='register-input-container2'\r\n          >\r\n            <TextField\r\n              required\r\n              variant='outlined'\r\n              color='primary'\r\n              type='text'\r\n              name='orgName'\r\n              value={userForm.orgName}\r\n              onChange={handleChange}\r\n              id='orgName'\r\n              label='Enter Organization Name'\r\n              className='register-form-input-text'\r\n            />\r\n          </div>\r\n          <div className='register-input-container2'>\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              required\r\n              type='number'\r\n              name='orgNumber'\r\n              value={userForm.orgNumber}\r\n              onChange={handleChange}\r\n              id='orgNumber'\r\n              label='Enter Organization Contact Number'\r\n              className='register-form-input-text'\r\n\r\n            />\r\n          </div>\r\n          <div className='register-input-container2'>\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              required\r\n              type='text'\r\n              name='city'\r\n              value={userForm.city}\r\n              onChange={handleChange}\r\n              id='city'\r\n              label='Enter City'\r\n              className='register-form-input-text'\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ marginBottom: '12px' }}\r\n            className='register-input-container2'\r\n          >\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              required\r\n              type='text'\r\n              name='orgAddress'\r\n              value={userForm.orgAddress}\r\n              onChange={handleChange}\r\n              id='orgAddress'\r\n              label='Enter Organization Address'\r\n              className='register-form-input-text'\r\n            />\r\n          </div>\r\n          <div\r\n            style={{ marginBottom: '12px' }}\r\n            className='register-input-container2'\r\n          >\r\n            <TextField\r\n              variant='outlined'\r\n              color='primary'\r\n              required\r\n              type='text'\r\n              name='repName'\r\n              value={userForm.repName}\r\n              onChange={handleChange}\r\n              id='repName'\r\n              label='Enter Representative Name'\r\n              className='register-form-input-text'\r\n            />\r\n          </div>\r\n\r\n          <div className='register-input-container2'>\r\n            <input\r\n              id='contained-repID'\r\n              type='file'\r\n              required\r\n              name='repId'\r\n              style={{ display: 'none' }}\r\n              onChange={(e) => {\r\n                const file = e.target.files[0];\r\n                handlerepId(file);\r\n                setlistRepId(e.target.files.length);\r\n              }}\r\n            />\r\n\r\n            <label htmlFor='contained-repID'>\r\n              <Button\r\n                style={{ marginTop: '12px' }}\r\n                variant='outlined'\r\n                color='primary'\r\n                component='span'\r\n              >\r\n                {`Upload Valid Representative ID: ${listRepId}`}\r\n              </Button>\r\n            </label>\r\n          </div>\r\n\r\n          <div style={{marginBottom: '12px'}}>\r\n            <input\r\n              id='contained-button-orgDocuments'\r\n              multiple\r\n              type='file'\r\n              required\r\n              name='orgDocuments'\r\n              style={{ display: 'none' }}\r\n              onChange={(e) => {\r\n                const multifiles = e.target.files;\r\n                handleorgDocuments(multifiles);\r\n                setListOrgDocuments(multifiles.length);\r\n              }}\r\n            />\r\n\r\n            <label htmlFor='contained-button-orgDocuments'>\r\n              <Button variant='outlined' color='primary' component='span'>\r\n                {`Upload Organization Documents: ${listOrgDocuments}`}\r\n              </Button>\r\n            </label>\r\n          </div>\r\n          <div\r\n            style={{ marginBottom: '12px' }}\r\n            className='register-input-container2'\r\n          >\r\n        \r\n         \r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{ marginBottom: '12px' }}\r\n          className='register-org-description-container'\r\n        >\r\n          <TextField\r\n            variant='outlined'\r\n            color='primary'\r\n            required\r\n            rows={6}\r\n            multiline\r\n            name='orgDescriptions'\r\n            value={userForm.orgDescriptions}\r\n            onChange={handleChange}\r\n            id='orgDescriptions'\r\n            placeholder='Enter Organization Description'\r\n            className='register-form-input-text'\r\n          />\r\n        </div>\r\n\r\n        <Checkbox\r\n          style={{ marginTop: '-8px' }}\r\n          checked={terms}\r\n          name='checkedB'\r\n          color='primary'\r\n        />\r\n        <Button\r\n          onClick={handleClickOpen}\r\n          variant='text'\r\n          style={{ marginBottom: '5px' }}\r\n          color='primary'\r\n        >\r\n          TERMS AND CONDITION\r\n        </Button>\r\n\r\n        <div className='form-button-container'>\r\n          <Button variant='outlined' color='default'>\r\n            <Link to='/auth/login' className='form-link'>\r\n              Cancel\r\n            </Link>\r\n          </Button>\r\n\r\n          <Button\r\n            disabled={!terms}\r\n            variant='contained'\r\n            color='primary'\r\n            type='submit'\r\n            className='form-button'\r\n            \r\n          >\r\n            Send Registration\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\authPage\\ForgotPass.jsx",["257"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport '../../../style/authPage/forgotPassword.css'\r\nimport axios from 'axios'\r\nimport {TextField, Button, Snackbar} from '@material-ui/core'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nfunction ForgotPass(props) {\r\n    const [email, setEmail] = useState('')\r\n\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault()\r\n\r\n\r\n    const query = async () =>{\r\n\r\n\r\n       const forgotPass =  await axios.post('http://localhost:5000/user/forgotPassword', {email})\r\n        console.log(forgotPass.data.valid)\r\n\r\n        if(forgotPass.data.valid === false) {\r\n            setOpen({open: true, severity: 'error', msg: 'Email Not Found!'  })\r\n        }\r\n        else if(forgotPass.data.valid === true){ \r\n            setOpen({open: true, severity: 'success', msg: 'Temporary Password Sent Successfully'  })\r\n            \r\n        } \r\n\r\n        setEmail('');\r\n\r\n\r\n    }\r\n\r\n    query();\r\n        \r\n    }\r\n\r\n\r\n    function Alert(props) {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n      }\r\n      \r\n      const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n          width: '100%',\r\n          '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n          },\r\n        },\r\n      }));\r\n\r\n      const classes = useStyles();\r\n      const [open, setOpen] = React.useState({open: false, severity: '', msg: ''});\r\n    \r\n    \r\n    \r\n      const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return; \r\n        }\r\n    \r\n        setOpen({...open, open: false});\r\n      };\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n      <Snackbar open={open.open} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={open.severity}>\r\n         {open.msg}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div className='forgot-pass-container'>\r\n            <div className='forgot-pass-title'>\r\n                <h1 className='authTitle'>Forgot Password</h1>\r\n                <p className='authDetails'>Will send your temporary password in your email, Please change it after you logged in</p>\r\n            </div>\r\n            <form className='form-container' onSubmit={handleSubmit}>\r\n            \r\n              \r\n              \r\n                <TextField required={true} variant=\"outlined\" label=\"Enter Your Email\" fullWidth type=\"email\" name=\"email\" id=\"email\" value={email} style={{marginBottom: \"10px\"}}  onChange={e => {setEmail(e.target.value); console.log(email)}} />\r\n             \r\n             \r\n             \r\n             \r\n             \r\n          \r\n          \r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth>Send</Button>\r\n\r\n          \r\n            </form>\r\n            \r\n            \r\n            \r\n            \r\n            <div style={{ width: '100%' }} className='form-button-container'>\r\n                <div>\r\n                   <Button variant=\"text\"><Link to=\"/auth/login\" className='form-link'>Login</Link></Button> \r\n                   <Button variant=\"text\">  <Link to=\"/auth/register\" className='form-link'>Signup</Link> </Button> \r\n                </div>\r\n               \r\n            </div>\r\n        </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForgotPass;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\Sidebar.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminAccepted.jsx",["258","259"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { accountRejected } from '../../../app/accounts'\r\n\r\nfunction AdminAccepted(props) {\r\n    const theadData = [\r\n        {\r\n            label: 'Organization',\r\n            name: 'orgName'\r\n        },\r\n        {\r\n            label: 'Email',\r\n            name: 'email'\r\n        },\r\n        {\r\n            label: 'City',\r\n            name: 'city'\r\n        },\r\n        {\r\n            label: 'Rep. Name',\r\n            name: 'repName'\r\n        },\r\n    ]\r\n\r\n    const handleEditButton = (account) => {\r\n        console.log(account);\r\n    }\r\n\r\n    const handleDeleteButton = async (account) => {\r\n        props.accountRejected(account)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className='admin-page-title'>Accepted</h1>\r\n            <table className='table-container'>\r\n                <thead>\r\n                    <tr>\r\n                        {theadData.map(tableHead =>\r\n                            <th key={tableHead.name} className='table-header'>{tableHead.label}</th>\r\n                        )}\r\n                        <th className='table-header'>No. of Post</th>\r\n                        <th className='table-header'>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.accApproved.map(account =>\r\n                        <tr key={account._id}>\r\n                            {theadData.map(tableHead =>\r\n                                <td key={tableHead.name} className='table-item'>\r\n                                    {account[tableHead.name]}</td>\r\n                            )}\r\n                            <td className='table-item'>\r\n\r\n                            </td>\r\n                            <td className='table-item'>\r\n                                {/* <FontAwesomeIcon\r\n                                    icon={faEdit}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={e => handleEditButton(account)}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                /> */}\r\n                                <FontAwesomeIcon\r\n                                    icon={faTrash}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={e => handleDeleteButton(account)}\r\n                                    style={{ cursor: 'pointer' }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { accApproved: state.accounts.approved }\r\n}\r\n\r\nexport default connect(mapStateToProps, { accountRejected })(AdminAccepted);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminRejected.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPending.jsx",["260"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport axios from 'axios'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { accountApproved, accountRejected } from '../../../app/accounts'\r\n\r\n\r\nfunction AdminPending(props) {\r\n\r\n    const theadData = [\r\n        {\r\n            label: 'Organization',\r\n            name: 'orgName'\r\n        },\r\n        {\r\n            label: 'Email',\r\n            name: 'email'\r\n        },\r\n        {\r\n            label: 'City',\r\n            name: 'city'\r\n        },\r\n        {\r\n            label: 'Rep. Name',\r\n            name: 'repName'\r\n        },\r\n    ]\r\n\r\n    const handleApproveAccount = async (account) => {\r\n        // await axios.post(`http://localhost:5000/admin/changestatus/${account}/approved`)\r\n        //     .then(() => accountList = [])\r\n        props.accountApproved(account)\r\n        // window.location.reload();\r\n    };\r\n\r\n    const handleRejectAccount = async (account) => {\r\n        props.accountRejected(account)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className='admin-page-title'>Pending</h1>\r\n            <table className='table-container'>\r\n                <thead>\r\n                    <tr>\r\n                        {theadData.map(tableHead =>\r\n                            <th key={tableHead.name} className='table-header'>{tableHead.label}</th>\r\n                        )}\r\n                        <th>Status</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {props.accountPending.map(account =>\r\n                        <tr key={account._id}>\r\n                            {theadData.map(tableHead =>\r\n                                <td key={tableHead.name} className='table-item'>\r\n                                    {account[tableHead.name]}\r\n                                </td>\r\n                            )}\r\n                            <td className='table-item' id='table-button-container'>\r\n                                <FontAwesomeIcon\r\n                                    icon={faCheck}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={() => handleApproveAccount(account)}\r\n                                />\r\n                                <FontAwesomeIcon\r\n                                    icon={faTimes}\r\n                                    className='table-icon'\r\n                                    size='lg'\r\n                                    onClick={() => handleRejectAccount(account)}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return { accountPending: state.accounts.pending }\r\n}\r\nexport default connect(mapStateToProps, { accountApproved, accountRejected })(AdminPending);","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLogin.jsx",["261","262"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport {Container, TextField,  Typography,  CssBaseline, Button} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction AdminLogin(props) {\r\n    const [auth, setAuth] = useState({ username: '', password: '' })\r\n\r\n    const handleSubmit = async event => {\r\n        event.preventDefault()\r\n\r\n        const valid = await axios.post('http://localhost:5000/admin/login', auth);\r\n      \r\n        if (valid.data.valid !== true) \r\n            window.alert(valid.data.valid);\r\n    \r\n        else{\r\n\r\n\r\n            console.log(valid.data.token);\r\n      localStorage.setItem('admin', valid.data.token)\r\n      window.location.reload();\r\n\r\n      window.alert('Login Success');\r\n\r\n        }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n          marginTop: theme.spacing(8),\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        },\r\n        avatar: {\r\n          margin: theme.spacing(1),\r\n          backgroundColor: theme.palette.secondary.main,\r\n        },\r\n        form: {\r\n          width: '100%', \r\n          marginTop: theme.spacing(1),\r\n        },\r\n        submit: {\r\n          margin: theme.spacing(3, 0, 2),\r\n        },\r\n      }));\r\n    \r\n    \r\n    \r\n      const classes = useStyles();\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    return (\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        <Container component=\"main\" maxWidth=\"sm\" >\r\n\r\n\r\n\r\n\r\n<CssBaseline/>\r\n\r\n\r\n\r\n\r\n  <div className={classes.paper}>\r\n   \r\n  \r\n\r\n            <div style={{padding: '5px 25px 50px 25px'}} className=\"shadow-container\">\r\n                <h1 style={{position:'relative', left:'30%'}} className='authTitle'>Admin Login</h1>\r\n          \r\n            \r\n          \r\n            <form action=\"#\" className='form-container' >\r\n                <TextField style={{marginBottom: '12px'}}variant=\"outlined\" type=\"text\" name=\"username\" id=\"username\" label='Enter Username: ' className='form-input-text' value={auth.username} onChange={e => setAuth({ ...auth, username: e.target.value })} />\r\n                <TextField style={{marginBottom: '12px'}} variant=\"outlined\" type=\"password\" name=\"password\" id=\"password\" label='Enter Password' className='form-input-text' value={auth.password} onChange={e => setAuth({ ...auth, password: e.target.value })} />\r\n              \r\n              \r\n              \r\n              \r\n              \r\n                    <Button variant=\"contained\" color=\"primary\"  onClick={handleSubmit} fullWidth>Login</Button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n            </Container>\r\n            \r\n    );\r\n}\r\n\r\nexport default AdminLogin;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\PostList.jsx",["263","264","265","266"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\UpdateUserPost.jsx",["267"],"import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport PostCreateUpdate from './PostCreateUpdate';\r\nimport PostDetailUpdate from './PostDetailUpdate';\r\n\r\nfunction UpdateUserPost(props) {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path='/user/update-details/:id/create' component={PostCreateUpdate} />\r\n                <Route path='/user/update-details/:id' component={PostDetailUpdate} />\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateUserPost;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\changePassPage\\ChangePass.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\UserPostDetails.jsx",["268"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerPage.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\PostCard.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\common\\SideBarDonor.jsx",["269","270","271","272"],"import React, { useState, useEffect } from 'react';\r\nimport '../../style/common/sidebarDonor.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport { Snackbar, Chip, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@material-ui/core'\r\n\r\nimport axios from 'axios'\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n    position: 'relative',\r\n    overflow: 'auto',\r\n    maxHeight: 300,\r\n  },\r\n  listSection: {\r\n    backgroundColor: 'inherit',\r\n  },\r\n  ul: {\r\n    backgroundColor: 'inherit',\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\n\r\nfunction SideBarDonor(props) {\r\n  const classes = useStyles();\r\n  const { selectedPost: {\r\n    totalDonors,\r\n    totalAmount,\r\n    currentAmount,\r\n    itemQuantity,\r\n    donationType,\r\n    _id,\r\n    location\r\n\r\n  }\r\n  } = props\r\n  const [donorList, setDonorList] = useState([])\r\n\r\n  useEffect(() => {\r\n    const postId = _id\r\n\r\n    const getDonors = async () => {\r\n     \r\n      const { data } = await axios.post(`http://localhost:5000/ledger/getall`, {token: localStorage.getItem('user')})\r\n     \r\n      setDonorList(data.filter(data => data.status === 'Approved'))\r\n\r\n      \r\n    }\r\n    getDonors()\r\n  }, [])\r\n\r\n\r\n  const [donateForm, setDonateForm] = useState({\r\n\r\n    donorName: '',\r\n    amount: 0,\r\n    remarks: '',\r\n    email: '',\r\n    donationType: 'Cash',\r\n    paymentAddress : ''\r\n\r\n  })\r\n\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n\r\n  e.preventDefault()    \r\n\r\n    if (donateForm.amount === 0) return handleClose()\r\n    else { await axios.post(`http://localhost:5000/ledger/pending/${_id}`, {...donateForm, token: localStorage.getItem('user')})\r\n      .catch(err => console.log('Error: ', err)) \r\n    \r\n  \r\n  \r\n    }\r\n    \r\n\r\n  }\r\n\r\n  const [snacker, setSnacker] = useState(false);\r\n\r\n\r\n\r\n\r\n  const handleClickAlert = () => {\r\n    setSnacker(true);\r\n  };\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setSnacker(false);\r\n  };\r\n\r\n\r\n\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <aside>\r\n\r\n\r\n\r\n      <Snackbar open={snacker} autoHideDuration={2000} onClose={handleCloseAlert}>\r\n        <Alert onClose={handleCloseAlert} severity=\"success\">\r\n          Successfully Donated\r\n  </Alert>\r\n\r\n\r\n      </Snackbar>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      <div className='sidebar-donor'>\r\n\r\n\r\n        {donationType === \"In-Kind\" ?\r\n          <div>\r\n            <Chip style={{ marginBottom: '10px', width: '200px' }} label={location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n            <Chip style={{ width: '200px' }} label={donationType === \"Both\" ? 'Cash/In-Kind' : donationType} variant=\"outlined\" color=\"primary\" />\r\n          </div>\r\n          :\r\n          <div>\r\n            <Chip style={{ marginBottom: '10px' }} label={location} variant=\"outlined\" color=\"primary\" /> <br></br>\r\n            <Chip label={donationType === \"Both\" ? 'Cash/In-Kind' : donationType} variant=\"outlined\" color=\"primary\" />\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        {donationType === 'Both' || donationType === 'Cash' ?\r\n          <div>\r\n            <div>\r\n              <h3 className='sidebar-donor-data'>₱{currentAmount}</h3>\r\n              <p className='sidebar-donor-text'>Total Raise</p>\r\n            </div>\r\n            <div>\r\n              <h3 className='sidebar-donor-data'>₱{totalAmount}</h3>\r\n              <p className='sidebar-donor-text'>Target Amount</p>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n          : ''}\r\n\r\n        {donationType === 'Both' || donationType === 'In-Kind' ?\r\n\r\n          <div>\r\n            <h3 className='sidebar-donor-data'>&nbsp;&nbsp;{itemQuantity}</h3>\r\n            <p className='sidebar-donor-text'>&nbsp;Items Donated</p>\r\n          </div>\r\n\r\n          : ''}\r\n\r\n\r\n\r\n\r\n        <div>\r\n          <h3 className='sidebar-donor-data'>&nbsp;&nbsp;{totalDonors}</h3>\r\n          <p className='sidebar-donor-text'>&nbsp;&nbsp;Donors</p>\r\n        </div>\r\n\r\n\r\n\r\n       \r\n\r\n          <Button variant=\"contained\" color=\"primary\" style={{ margin: '20px 0 0 5px' }} onClick={handleClickOpen}>Donate Now</Button>\r\n       \r\n\r\n\r\n\r\n      </div>\r\n\r\n      <div className='sidebar-donor-list'>\r\n        <p>\r\n          {props.children}\r\n        </p>\r\n        <List className={classes.root} subheader={<li />}>\r\n          {donorList.map(donor =>\r\n            <div className='sidebar-donor-content'>\r\n              <div className='sidebar-donor-name'>{donor.donorName}</div>\r\n              <div className='sidebar-donor-message'>{donor.remarks !== 'No Message' ? donor.remarks : ''}</div>\r\n              <div className='sidebar-donor-amount'>Donated ₱{donor.amount}</div>\r\n            </div>\r\n          )}\r\n\r\n        </List>\r\n      </div>\r\n\r\n      <Dialog open={openModal} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth='sm' fullWidth={true}>\r\n        <form onSubmit={handleSubmit}>\r\n          <DialogTitle id=\"form-dialog-title\" style={{ alignSelf: 'center', fontSize: '50px' }}>Donate</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please Fill the Inputs Bellow:\r\n          </DialogContentText>\r\n\r\n\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n\r\n              margin=\"dense\"\r\n              id=\"name\"\r\n              label=\"Name (Leave Blank for Anonymous Donation)\"\r\n              type=\"text\"\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, donorName: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n{donationType === 'Both' &&\r\n<FormControl\r\n              style={{ marginBottom: '12px' }}\r\n              fullWidth={true}\r\n              component='fieldset'\r\n            >\r\n              <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n\r\n              <RadioGroup\r\n                aria-label='gender'\r\n                name='gender1'\r\n                value={donateForm.donationType}\r\n                onChange={(e) =>\r\n                  setDonateForm({ ...donateForm, donationType: e.target.value })\r\n                }\r\n              >\r\n                <FormControlLabel\r\n                  value='Cash'\r\n                  control={<Radio />}\r\n                  label='Cash'\r\n                />\r\n\r\n                <FormControlLabel\r\n                  value='In-Kind'\r\n                  control={<Radio />}\r\n                  label='In-Kind'\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n              }\r\n\r\n\r\n\r\n<TextField\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"paymentAddress\"\r\n              // inputProps={{ pattern: '[0-9]' }}\r\n              label={donationType === 'Both' ? donateForm.donationType === 'Cash' ? \"Enter type of Payment etc. Gcash, Paymaya, BPI (Required)\" : 'Where did you donate the item? (Required)' : donationType === 'Cash' ? \"Enter type of Payment etc. Gcash, Paymaya, BPI (Required)\" : 'Where did you donate the item? (Required)'}\r\n              required={true}\r\n              type=\"text\"\r\n              inputProps={{ min: 0 }}\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, paymentAddress: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <TextField\r\n              autoFocus\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"amount\"\r\n              // inputProps={{ pattern: '[0-9]' }}\r\n              label={donationType === 'Both' ? donateForm.donationType === 'Cash' ? \"Enter Cash Amount (Required)\" : 'Enter Item Quantity (Required)' : donationType === 'Cash' ? \"Enter Cash Amount (Required)\" : 'Enter Item Quantity (Required)'}\r\n              required={true}\r\n              type=\"number\"\r\n              inputProps={{ min: 0 }}\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, amount: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n            <TextField\r\n\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"email\"\r\n              label=\"Email (Optional, For Sending the Certificate)\"\r\n              type=\"email\"\r\n              fullWidth={true}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, email: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"dense\"\r\n              id=\"outlined-multiline-static\"\r\n              label=\"Message (Optional) max input 100 characters\"\r\n              rows={4}\r\n              type=\"text\"\r\n              multiline\r\n              fullWidth={true}\r\n              inputProps={{ maxLength: 100 }}\r\n              onChange={(e) =>\r\n                setDonateForm({ ...donateForm, remarks: e.target.value })\r\n              }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n          </Button>\r\n            <Button type=\"submit\" disabled={donateForm.amount === 0}  color=\"primary\">\r\n              Donate\r\n          </Button>\r\n\r\n          </DialogActions>\r\n\r\n        </form>\r\n      </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </aside>\r\n  );\r\n}\r\n\r\nexport default SideBarDonor;","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\others\\cityLocation.js",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerCreate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\ledgerPage\\LedgerList.jsx",["273","274","275","276","277","278","279"],"import React, { useContext, useState } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Container from '@material-ui/core/Container';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Icon,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Radio,\r\n  RadioGroup,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  MenuItem,\r\n  Snackbar,\r\n} from '@material-ui/core/';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { userLedgerAdded, userLedgerAccepted, userLedgerRejected } from '../../../../app/user';\r\nimport { CodeOutlined, LaptopWindows } from '@material-ui/icons';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport route from '../../../../route/instagive'\r\n\r\nfunction LedgerList(props) {\r\n  console.log('ledger here', props.ledger)\r\n  const StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }))(TableCell);\r\n\r\n  const StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }))(TableRow);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  // Modal\r\n\r\n  const [ledgerForm, setLedgerForm] = useState({\r\n    postId: '',\r\n    donorName: '',\r\n    donationType: 'Cash',\r\n    paymentAddress: '',\r\n    amount: 0,\r\n    remarks: '',\r\n    date: '',\r\n    email: '',\r\n  });\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    // if (ledgerForm.postId === 'Select Post' || ledgerForm.postId === '') return alert('Select Post first')\r\n    // if (ledgerForm.date === '') return alert('Select Date first')\r\n\r\n    if (ledgerForm.donorName === '')\r\n      setLedgerForm({ ...ledgerForm, donorName: 'Anonymous' });\r\n\r\n    props.userLedgerAdded(ledgerForm, props.userToken);\r\n\r\n    setLedgerForm({\r\n      postId: '',\r\n      donorName: '',\r\n      donationType: 'Cash',\r\n      paymentAddress: '',\r\n      amount: 0,\r\n      remarks: '',\r\n      date: '',\r\n      email: '',\r\n    });\r\n\r\n    handleClose();\r\n    setOpen(true);\r\n\r\n    document.location.reload();\r\n  };\r\n\r\n  const [openModal, setModal] = useState(false);\r\n\r\n  const handleClickOpen = async () => {\r\n    setModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n\r\n  const [openModalPending, setModalPending] = useState(false);\r\n\r\n  const handleClickOpenPending = async () => {\r\n    setModalPending(true);\r\n  };\r\n\r\n  const handleClosePending = () => {\r\n    setModalPending(false);\r\n  };\r\n\r\n\r\n\r\n  const [openModalRejected, setModalRejected] = useState(false);\r\n\r\n  const handleClickOpenRejected = async () => {\r\n    setModalRejected(true);\r\n  };\r\n\r\n  const handleCloseRejected = () => {\r\n    setModalRejected(false);\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleApproveLedger = async (ledgerID) => {\r\n    const data = await route.post(`/ledger/${ledgerID}/Approved`, {token: props.userToken})\r\n    document.location.reload();\r\n  }\r\n\r\n\r\n  const handleRejectLedger = async (ledgerID) => {\r\n    const data = await route.post(`/ledger/${ledgerID}/Rejected`, {token: props.userToken})\r\n    document.location.reload();\r\n  }\r\n\r\n\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleCloseAlert = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  function Alert(props) {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Snackbar open={open} autoHideDuration={4000} onClose={handleCloseAlert}>\r\n        <Alert onClose={handleCloseAlert} severity='success'>\r\n          Data Successfully Added\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Button\r\n        style={{ margin: '12px' }}\r\n        onClick={handleClickOpen}\r\n        variant='outlined'\r\n        color='primary'\r\n        endIcon={<AddIcon fontSize='small'></AddIcon>}\r\n      >\r\n        Add Data\r\n      </Button>\r\n\r\n      <Button\r\n        style={{ margin: '10px' }}\r\n        onClick={handleClickOpenPending}\r\n        variant='outlined'\r\n        color='primary'\r\n        endIcon={<HourglassEmptyIcon fontSize='small'></HourglassEmptyIcon>}\r\n      >\r\n        Pending Donates\r\n      </Button>\r\n      <Button\r\n        style={{ margin: '10px' }}\r\n        onClick={handleClickOpenRejected}\r\n        variant='outlined'\r\n        color='secondary'\r\n        endIcon={<DeleteOutlineIcon fontSize='small'></DeleteOutlineIcon>}\r\n      >\r\n        Rejected Donates\r\n      </Button>\r\n\r\n      <Container component='main' maxWidth='xl' className='shadow-container'>\r\n        <div>\r\n          <TextField\r\n            variant='outlined'\r\n            style={{\r\n              width: '50%',\r\n              display: 'relative',\r\n              left: '25%',\r\n              marginBottom: '30px',\r\n            }}\r\n            label='Search Here'\r\n          />\r\n        </div>\r\n\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.ledger.ledgerAccepted &&\r\n                  props.ledger.ledgerAccepted.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Container>\r\n\r\n      {/* Modal */}\r\n\r\n      <Dialog\r\n        open={openModal}\r\n        onClose={handleClose}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='sm'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Add New Data\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <form onSubmit={handleSubmit}>\r\n            <DialogContentText>\r\n              Please Fill the Inputs Bellow:\r\n            </DialogContentText>\r\n\r\n            <FormControl\r\n              style={{ marginBottom: '12px' }}\r\n              fullWidth={true}\r\n              className={classes.formControl}\r\n            >\r\n              <InputLabel style={{ marginLeft: '12px' }} id='post'>\r\n                Select Post\r\n              </InputLabel>\r\n\r\n              <Select\r\n                required={true}\r\n                variant='outlined'\r\n                label='city'\r\n                name='city'\r\n                id='city'\r\n                fullWidth={true}\r\n                value={ledgerForm.postId}\r\n                onChange={(e) =>\r\n                  setLedgerForm({ ...ledgerForm, postId: e.target.value })\r\n                }\r\n              >\r\n                {props.post &&\r\n                  props.post.map((post) => (\r\n                    <MenuItem key={post._id} value={post._id}>\r\n                      {post.Title}\r\n                    </MenuItem>\r\n                  ))}\r\n              </Select>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n              style={{ marginBottom: '12px' }}\r\n              fullWidth={true}\r\n              component='fieldset'\r\n            >\r\n              <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n\r\n              <RadioGroup\r\n                aria-label='gender'\r\n                name='gender1'\r\n                value={ledgerForm.donationType}\r\n                onChange={(e) =>\r\n                  setLedgerForm({ ...ledgerForm, donationType: e.target.value })\r\n                }\r\n              >\r\n                <FormControlLabel\r\n                  value='Cash'\r\n                  control={<Radio />}\r\n                  label='Cash'\r\n                />\r\n\r\n                <FormControlLabel\r\n                  value='In-Kind'\r\n                  control={<Radio />}\r\n                  label='In-Kind'\r\n                />\r\n              </RadioGroup>\r\n            </FormControl>\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Donor Name (Optional)'\r\n              type='text'\r\n              name='donorName'\r\n              id='donorName'\r\n              value={ledgerForm.donorName}\r\n              onChange={(e) => {\r\n                setLedgerForm({ ...ledgerForm, donorName: e.target.value });\r\n              }}\r\n            />\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Email (Optional)'\r\n              type='text'\r\n              name=''\r\n              id=''\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, email: e.target.value })\r\n              }\r\n            />\r\n\r\n            {ledgerForm.donationType === 'Cash' ? (\r\n              <TextField\r\n                style={{ marginBottom: '12px' }}\r\n                required={true}\r\n                variant='outlined'\r\n                fullWidth={true}\r\n                label='Enter Payment Method (FOR-CASH) '\r\n                type='text'\r\n                name='paymentAddress'\r\n                id='paymentAddress'\r\n                value={ledgerForm.paymentAddress}\r\n                onChange={(e) =>\r\n                  setLedgerForm({\r\n                    ...ledgerForm,\r\n                    paymentAddress: e.target.value,\r\n                  })\r\n                }\r\n              />\r\n            ) : (\r\n              ''\r\n            )}\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              pattern='[0-9]+'\r\n              required={true}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              label='Enter Amount(Cash) / Item Quantity(In-Kind)'\r\n              type='number'\r\n              name='amount'\r\n              id='amount'\r\n              value={ledgerForm.amount}\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, amount: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              rows={4}\r\n              multiline\r\n              label='Enter Remarks'\r\n              type='text'\r\n              name='remarks'\r\n              id='remarks'\r\n              value={ledgerForm.remarks}\r\n              onChange={(e) =>\r\n                setLedgerForm({ ...ledgerForm, remarks: e.target.value })\r\n              }\r\n            />\r\n\r\n            <TextField\r\n              required={true}\r\n              style={{ marginBottom: '12px' }}\r\n              variant='outlined'\r\n              fullWidth={true}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              type='date'\r\n              onChange={(date) => {\r\n                setLedgerForm({ ...ledgerForm, date: date.target.value });\r\n              }}\r\n            />\r\n\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n              <Button\r\n                type='submit'\r\n                disabled={ledgerForm.amount === 0}\r\n                color='primary'\r\n              >\r\n                Donate\r\n              </Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n{/* Pending */}\r\n<Dialog\r\n        open={openModalPending}\r\n        onClose={handleClosePending}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='large'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Pending Donates\r\n        </DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n             Approved / Reject Donates\r\n            </DialogContentText>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                  <StyledTableCell align='center'>UPDATE</StyledTableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              \r\n              {/* Loop ALl Pending */}\r\n                {props.ledger.ledgerList &&\r\n                  props.ledger.ledgerList.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                      <Button variant=\"contained\"\r\n                       endIcon={<CheckIcon></CheckIcon>} \r\n                       fullWidth={true} \r\n                       color=\"primary\"\r\n                       onClick={() => handleApproveLedger(data._id)}\r\n                       ></Button>\r\n                      <Button variant=\"contained\"\r\n                       endIcon={<ClearIcon></ClearIcon>} \r\n                       fullWidth={true} \r\n                       color=\"secondary\"\r\n                       onClick={() => handleRejectLedger(data._id)}\r\n                       ></Button>\r\n\r\n                      \r\n                      </StyledTableCell>\r\n                 \r\n                 \r\n                 \r\n                 \r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              \r\n            <DialogActions>\r\n              <Button onClick={handleClosePending} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n\r\n        \r\n            </DialogActions>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* Rejected Donates */}\r\n\r\n<Dialog\r\n        open={openModalRejected}\r\n        onClose={handleCloseRejected}\r\n        aria-labelledby='form-dialog-title'\r\n        maxWidth='large'\r\n        fullWidth={true}\r\n      >\r\n        <DialogTitle\r\n          id='form-dialog-title'\r\n          style={{ alignSelf: 'center', fontSize: '50px' }}\r\n        >\r\n          Rejected Donates\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n            \r\n\r\n\r\n\r\n\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <StyledTableCell align='center'>POST</StyledTableCell>\r\n                  <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                  <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    DONATION TYPE\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    Payment Method (If Cash Donation)\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>\r\n                    AMOUNT / ITEM QUANTITY\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                  <StyledTableCell align='center'>DATE</StyledTableCell>\r\n\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n              \r\n              {/* Loop ALl Pending */}\r\n                {props.ledger.ledgerRejected &&\r\n                  props.ledger.ledgerRejected.map((data) => (\r\n                    <StyledTableRow key={data._id}>\r\n                      <StyledTableCell align='center'>\r\n                        {\r\n                          props.post.filter(\r\n                            (postData) => postData._id === data.postId\r\n                          )[0].Title\r\n                        }\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donorName}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.email}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.donationType}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.paymentAddress}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.amount}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >\r\n                        {data.remarks}\r\n                      </StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {data.date}\r\n                      </StyledTableCell>\r\n                 \r\n                 \r\n                 \r\n                 \r\n                 \r\n                    </StyledTableRow>\r\n                  ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <DialogActions>\r\n              <Button onClick={handleCloseRejected} color='primary'>\r\n                Cancel\r\n              </Button>\r\n\r\n\r\n        \r\n            </DialogActions>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n\r\n\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const ledgerList = state.user.ledger.filter(donate => donate.status !== 'Approved' && donate.status !== 'Rejected')\r\n  const ledgerAccepted = state.user.ledger.filter(donate => donate.status === 'Approved')\r\n  const ledgerRejected = state.user.ledger.filter(donate => donate.status === 'Rejected')\r\n  return {\r\n    ledger: {ledgerList, ledgerAccepted, ledgerRejected},\r\n    post: state.user.post,\r\n    userToken: state.auth.token,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { userLedgerAdded, userLedgerAccepted, userLedgerRejected })(LedgerList);\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postDetailPage\\PostCreateDetails.jsx",["280"],"import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../../../style/userPage/userPage.css';\r\nimport { cityLocation } from '../../../others/cityLocation';\r\nimport axios from 'axios';\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Typography,\r\n  CssBaseline,\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  FormLabel,\r\n  FormControlLabel,\r\n  Radio,\r\n  RadioGroup,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction PostCreateDetails(props) {\r\n  const [postForm, setPostForm] = useState({\r\n    Title: '',\r\n    description: '',\r\n    location: '',\r\n    donationType: 'Cash',\r\n    totalAmount: '',\r\n  });\r\n  const [files, setFiles] = useState({\r\n    imageList: '',\r\n    profilePic: '',\r\n  });\r\n\r\n  const [numberImage, setNumberImage] = useState({\r\n\r\n    name: ''\r\n\r\n  })\r\n  const [numberImageList, setNumberImageList] = useState(0)\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const formdata = new FormData();\r\n\r\n    formdata.append('profilePic', files.profilePic);\r\n\r\n    for (const key in files.imageList) {\r\n      formdata.append('imageList', files.imageList[key]);\r\n    }\r\n    formdata.append('Title', postForm.Title);\r\n    formdata.append('description', postForm.description);\r\n    formdata.append('location', postForm.location);\r\n    formdata.append('donationType', postForm.donationType);\r\n    formdata.append('totalAmount', postForm.totalAmount);\r\n    formdata.append('token', localStorage.getItem('user'));\r\n   \r\n\r\n    console.log(...formdata);\r\n\r\n\r\n    const data = await axios.post(\r\n      'http://localhost:5000/post/createpost',\r\n      formdata\r\n    );\r\n\r\n\r\n    window.location.replace('http://localhost:5001/user');\r\n  };\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Container component='main' maxWidth='md'>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n\r\n          <div style={{ padding: '50px 25px 50px 25px' }} className=\"shadow-container\">\r\n\r\n\r\n            <Typography component='h1' variant='h5'>\r\n              Creating New Post{' '}\r\n            </Typography>\r\n\r\n            <form encType='multipart/form-data' className={classes.form} onSubmit={handleSubmit}>\r\n              <Button variant='outlined' color='primary' component='label' >\r\n                {`Upload Cover Photo : ${numberImage.name === '' ? 'NONE' : numberImage.name}`}\r\n                <input\r\n                  hidden\r\n                  type='file'\r\n                  required={true}\r\n                  onChange={(e) => {\r\n                    const file = e.target.files[0];\r\n                    setFiles({ ...files, profilePic: file });\r\n                    setNumberImage({ name: e.target.files[0].name })\r\n                  }}\r\n                ></input>\r\n              </Button>\r\n\r\n              <TextField\r\n                color='primary'\r\n                margin='normal'\r\n                fullWidth\r\n                variant='outlined'\r\n                label='Enter Post Title'\r\n                type='text'\r\n                required={true}\r\n                name='title'\r\n                id='title'\r\n                className='user-form-input'\r\n                value={postForm.Title}\r\n                onChange={(e) =>\r\n                  setPostForm({ ...postForm, Title: e.target.value })\r\n                }\r\n              />\r\n\r\n\r\n\r\n              <FormControl fullWidth className={classes.formControl}>\r\n                <InputLabel style={{ marginLeft: '12px' }} id='city'>\r\n                  Select Location\r\n              </InputLabel>\r\n\r\n                <Select\r\n                  required={true}\r\n                  variant='outlined'\r\n                  label='city'\r\n                  name='city'\r\n                  id='city'\r\n                  fullWidth\r\n                  value={postForm.location}\r\n                  onChange={(e) =>\r\n                    setPostForm({ ...postForm, location: e.target.value })\r\n                  }\r\n                >\r\n                  {cityLocation.map((city) => (\r\n                    <MenuItem key={city} value={city}>{city}</MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <FormControl\r\n                component='fieldset'\r\n                style={{ margin: '12px 0 0 12px' }}\r\n              >\r\n                <FormLabel component='legend'>Select Donation Type</FormLabel>\r\n                <RadioGroup\r\n                  aria-label='gender'\r\n                  name='gender1'\r\n                  value={postForm.donationType}\r\n                  onChange={(e) =>\r\n                    setPostForm({ ...postForm, donationType: e.target.value, totalAmount: 0 })\r\n                  }\r\n                >\r\n                  <FormControlLabel\r\n                    value='Cash'\r\n                    control={<Radio />}\r\n                    label='Cash'\r\n                  />\r\n                  <FormControlLabel\r\n                    value='In-Kind'\r\n                    control={<Radio />}\r\n                    label='In-Kind'\r\n                  />\r\n                  <FormControlLabel\r\n                    value='Both'\r\n                    control={<Radio />}\r\n                    label='Both'\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n\r\n\r\n            {postForm.donationType === 'In-Kind' ? '' : \r\n\r\n\r\n              <TextField\r\n                required={true}\r\n                color='primary'\r\n                margin='normal'\r\n                fullWidth\r\n                variant='outlined'\r\n                label='Enter Amount'\r\n                type='number'\r\n                name='totalAmount'\r\n                id='totalAmount'\r\n                className='user-form-input'\r\n                value={postForm.totalAmount}\r\n                onChange={(e) =>\r\n                  setPostForm({ ...postForm, totalAmount: e.target.value })\r\n               \r\n                }\r\n              />\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <TextField\r\n              required={true}\r\n                variant=\"outlined\"\r\n                rows={10}\r\n                type='text'\r\n                multiline\r\n                id='description'\r\n                fullWidth\r\n\r\n\r\n\r\n                label=\"Enter your Post Description, You can include your own payment option and account, (etc, GCASH, BPI, PAYPAL) or  your address for In-Kind Donation\"\r\n                name='description'\r\n                value={postForm.description}\r\n                onChange={(e) =>\r\n                  setPostForm({ ...postForm, description: e.target.value })\r\n                }\r\n\r\n\r\n\r\n\r\n              />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <Button variant='outlined' color='primary' component='label' style={{ marginTop: '12px' }}>\r\n                {`Upload Reference Picture (Can Have Multiple Pictures) | Files Selected: ${numberImageList}`}\r\n                <input\r\n                required={true}\r\n                  hidden\r\n                  type='file'\r\n                  id='postImages'\r\n                  name='postImages'\r\n                  onChange={(e) => {\r\n                    const multifiles = e.target.files;\r\n                    setFiles({ ...files, imageList: multifiles });\r\n                    setNumberImageList(e.target.files.length)\r\n                  }}\r\n                  multiple\r\n\r\n                ></input>\r\n              </Button>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              <div style={{ marginTop: '12px', display: 'flex' }}>\r\n                <Button variant='outlined' color=\"default\" style={{ marginRight: '12px' }}> <Link to='/user'>Cancel</Link> </Button>\r\n\r\n\r\n\r\n                <Button variant='contained' color='primary' type=\"submit\">Save</Button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default PostCreateDetails;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostCreateUpdate.jsx",[],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\userPage\\postUpdatePage\\PostDetailUpdate.jsx",["281","282"],"C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminLedgers.jsx",["283","284"],"import {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Button,\r\n  ButtonGroup,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Fragment } from 'react';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport route from '../../../route/instagive'\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst AdminLedgers = () => {\r\n  const [userId, setUserId] = useState(0);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    formControl: {\r\n      minWidth: 120,\r\n    },\r\n    root: {\r\n      width: '100%',\r\n      '& > * + *': {\r\n        marginTop: theme.spacing(2),\r\n      },\r\n    },\r\n  }));\r\n\r\n  const [table, setTable] = useState('Pending');\r\n  const [orgSelected, setOrgSelected] = useState('')\r\n  const [orgList, setOrgList] = useState([]);\r\n  const [orgLedgerList, setOrgLedgerList] = useState([])\r\n  const [postList, setPostList] = useState([])\r\n\r\n  const classes = useStyles();\r\n  const handleReject = async (orgID) => {\r\n    await route.post(`/admin/changeledgerstatus/${orgID}/Rejected`)\r\n    document.location.reload();\r\n  };\r\n\r\n  const handleApprove = async (orgID) => {\r\n    await route.post(`/admin/changeledgerstatus/${orgID}/Approved`)\r\n    document.location.reload();\r\n  };\r\n\r\n  const handleGetUserLedger = (orgID) => {\r\n    const getData = async () => {\r\n      const { data } = await route.post(`/admin/userledger/${orgID}`)\r\n      setOrgLedgerList(data)\r\n    }\r\n    getData()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      const { data: user } = await route.get('/admin/getusers')\r\n      const { data: post } = await route.get('/admin/allpost')\r\n      setOrgList(user.approved)\r\n      setPostList(post)\r\n    }\r\n\r\n    getData()\r\n  }, [])\r\n  console.log(orgLedgerList)\r\n  return (\r\n    <div>\r\n      <h1 className='admin-page-title'>Ledgers</h1>\r\n\r\n      <Container\r\n        style={{ display: 'flex', justifyContent: 'space-between' }}\r\n        component='main'\r\n        maxWidth='xl'\r\n      >\r\n        <FormControl\r\n          style={{ marginBottom: '12px', marginLeft: '12px' }}\r\n          className={classes.formControl}\r\n        >\r\n          <InputLabel style={{ marginLeft: '12px' }} id='post'>\r\n            {orgSelected === '' ? 'Select Org' : orgSelected}\r\n          </InputLabel>\r\n\r\n          {orgList.map(org =>\r\n            <Select\r\n              key={org._id}\r\n              required={true}\r\n              variant='outlined'\r\n              label='city'\r\n              name='city'\r\n              id='city'\r\n              //value={ledgerForm.postId}\r\n              onClick={() => {\r\n                setOrgSelected(org.orgName)\r\n                handleGetUserLedger(org._id)\r\n              }}\r\n            >\r\n              <MenuItem>{org.orgName}</MenuItem>\r\n            ))\r\n          </Select>\r\n          )}\r\n        </FormControl>\r\n\r\n        <Typography variant='h2'> {table}</Typography>\r\n\r\n        <ButtonGroup\r\n          variant='outlined'\r\n          aria-label='outlined secondary button group'\r\n        >\r\n          <Button color={table === 'Approved' ? 'secondary' : 'default'} onClick={() => setTable('Approved')}>\r\n            Approved\r\n          </Button>\r\n          <Button color={table === 'Pending' ? 'secondary' : 'default'} onClick={() => setTable('Pending')}>\r\n            Pending\r\n          </Button>\r\n          <Button color={table === 'Rejected' ? 'secondary' : 'default'} onClick={() => setTable('Rejected')}>\r\n            Rejected\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Container>\r\n\r\n      <Container component='main' maxWidth='xl' className='shadow-container'>\r\n        <div style={{ overflowX: 'auto' }}>\r\n          <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label='customized table'>\r\n              <Fragment>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <StyledTableCell align='center'>POST</StyledTableCell>\r\n                    <StyledTableCell align='center'>NAME</StyledTableCell>\r\n                    <StyledTableCell align='center'>EMAIL</StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      DONATION TYPE\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      Payment Method (If Cash Donation)\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>\r\n                      AMOUNT / ITEM QUANTITY\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align='center'>REMARKS</StyledTableCell>\r\n                    <StyledTableCell align='center'>DATE</StyledTableCell>\r\n                    <StyledTableCell align='center'>STATUS</StyledTableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {orgLedgerList.filter(post => post.status === table).map(post =>\r\n                    <StyledTableRow key={post._id}>\r\n                      <StyledTableCell align='center'>{postList.find(postItem => postItem._id === post.postId).Title}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.donorName}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.email}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.donationType}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.paymentAddress}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.amount}</StyledTableCell>\r\n                      <StyledTableCell\r\n                        style={{ maxWidth: '20vw' }}\r\n                        align='center'\r\n                      >{post.remarks}</StyledTableCell>\r\n                      <StyledTableCell align='center'>{post.date}</StyledTableCell>\r\n                      <StyledTableCell align='center'>\r\n                        {table === 'Approved' && (\r\n                          <Button\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            onClick={() => handleReject(post._id)}\r\n                          >\r\n                            <ClearIcon />\r\n                          </Button>\r\n                        )}\r\n                        {table === 'Pending' && (\r\n                          <ButtonGroup>\r\n                            <Button\r\n                              variant='contained'\r\n                              color='primary'\r\n                              onClick={() => handleApprove(post._id)}\r\n                            >\r\n                              <CheckIcon />\r\n                            </Button>{' '}\r\n                            <Button\r\n                              variant='contained'\r\n                              color='secondary'\r\n                              onClick={() => handleReject(post._id)}\r\n                            >\r\n                              <ClearIcon />\r\n                            </Button>{' '}\r\n                          </ButtonGroup>\r\n                        )}\r\n                        {table === 'Rejected' && (\r\n                          <Button\r\n                            variant='contained'\r\n                            color='primary'\r\n                            onClick={() => handleApprove(post._id)}\r\n                          >\r\n                            <CheckIcon />\r\n                          </Button>\r\n                        )}\r\n                      </StyledTableCell>\r\n                    </StyledTableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Fragment>\r\n            </Table>\r\n          </TableContainer>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminLedgers;\r\n","C:\\Users\\Aaron Joshua\\Desktop\\Thesis\\instagive-react-frontend\\src\\components\\pages\\adminPage\\AdminPost.jsx",["285","286","287","288","289","290","291","292"],{"ruleId":"293","replacedBy":"294"},{"ruleId":"295","replacedBy":"296"},{"ruleId":"297","severity":1,"message":"298","line":1,"column":28,"nodeType":"299","messageId":"300","endLine":1,"endColumn":36},{"ruleId":"301","severity":1,"message":"302","line":42,"column":6,"nodeType":"303","endLine":42,"endColumn":8,"suggestions":"304"},{"ruleId":"297","severity":1,"message":"305","line":19,"column":7,"nodeType":"299","messageId":"300","endLine":19,"endColumn":20},{"ruleId":"297","severity":1,"message":"306","line":26,"column":7,"nodeType":"299","messageId":"300","endLine":26,"endColumn":22},{"ruleId":"297","severity":1,"message":"307","line":33,"column":7,"nodeType":"299","messageId":"300","endLine":33,"endColumn":22},{"ruleId":"308","severity":1,"message":"309","line":43,"column":1,"nodeType":"310","endLine":61,"endColumn":2},{"ruleId":"308","severity":1,"message":"309","line":42,"column":1,"nodeType":"310","endLine":65,"endColumn":2},{"ruleId":"308","severity":1,"message":"309","line":35,"column":1,"nodeType":"310","endLine":52,"endColumn":2},{"ruleId":"297","severity":1,"message":"311","line":6,"column":10,"nodeType":"299","messageId":"300","endLine":6,"endColumn":20},{"ruleId":"297","severity":1,"message":"312","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":12,"column":6,"nodeType":"303","endLine":12,"endColumn":8,"suggestions":"313"},{"ruleId":"297","severity":1,"message":"314","line":12,"column":10,"nodeType":"299","messageId":"300","endLine":12,"endColumn":25},{"ruleId":"297","severity":1,"message":"315","line":13,"column":10,"nodeType":"299","messageId":"300","endLine":13,"endColumn":18},{"ruleId":"297","severity":1,"message":"316","line":9,"column":12,"nodeType":"299","messageId":"300","endLine":9,"endColumn":22},{"ruleId":"297","severity":1,"message":"317","line":9,"column":24,"nodeType":"299","messageId":"300","endLine":9,"endColumn":37},{"ruleId":"301","severity":1,"message":"318","line":21,"column":8,"nodeType":"303","endLine":21,"endColumn":10,"suggestions":"319"},{"ruleId":"301","severity":1,"message":"302","line":21,"column":8,"nodeType":"303","endLine":21,"endColumn":26,"suggestions":"320"},{"ruleId":"297","severity":1,"message":"321","line":66,"column":7,"nodeType":"299","messageId":"300","endLine":66,"endColumn":22},{"ruleId":"308","severity":1,"message":"309","line":96,"column":1,"nodeType":"310","endLine":144,"endColumn":2},{"ruleId":"297","severity":1,"message":"322","line":1,"column":9,"nodeType":"299","messageId":"300","endLine":1,"endColumn":15},{"ruleId":"297","severity":1,"message":"323","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":24},{"ruleId":"324","severity":1,"message":"325","line":24,"column":32,"nodeType":"326","endLine":24,"endColumn":110},{"ruleId":"324","severity":1,"message":"325","line":26,"column":5,"nodeType":"326","endLine":26,"endColumn":63},{"ruleId":"297","severity":1,"message":"327","line":6,"column":10,"nodeType":"299","messageId":"300","endLine":6,"endColumn":14},{"ruleId":"297","severity":1,"message":"328","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":19},{"ruleId":"297","severity":1,"message":"329","line":5,"column":8,"nodeType":"299","messageId":"300","endLine":5,"endColumn":16},{"ruleId":"297","severity":1,"message":"330","line":6,"column":8,"nodeType":"299","messageId":"300","endLine":6,"endColumn":24},{"ruleId":"297","severity":1,"message":"331","line":7,"column":8,"nodeType":"299","messageId":"300","endLine":7,"endColumn":18},{"ruleId":"332","severity":1,"message":"333","line":16,"column":11,"nodeType":"326","endLine":16,"endColumn":121},{"ruleId":"332","severity":1,"message":"333","line":35,"column":17,"nodeType":"326","endLine":35,"endColumn":144},{"ruleId":"301","severity":1,"message":"334","line":27,"column":8,"nodeType":"303","endLine":27,"endColumn":20,"suggestions":"335"},{"ruleId":"297","severity":1,"message":"336","line":1,"column":8,"nodeType":"299","messageId":"300","endLine":1,"endColumn":13},{"ruleId":"297","severity":1,"message":"311","line":12,"column":10,"nodeType":"299","messageId":"300","endLine":12,"endColumn":20},{"ruleId":"337","severity":1,"message":"338","line":132,"column":11,"nodeType":"339","endLine":132,"endColumn":26},{"ruleId":"297","severity":1,"message":"340","line":17,"column":8,"nodeType":"299","messageId":"300","endLine":17,"endColumn":18},{"ruleId":"297","severity":1,"message":"311","line":18,"column":10,"nodeType":"299","messageId":"300","endLine":18,"endColumn":20},{"ruleId":"297","severity":1,"message":"328","line":19,"column":8,"nodeType":"299","messageId":"300","endLine":19,"endColumn":19},{"ruleId":"297","severity":1,"message":"341","line":55,"column":13,"nodeType":"299","messageId":"300","endLine":55,"endColumn":20},{"ruleId":"297","severity":1,"message":"342","line":3,"column":10,"nodeType":"299","messageId":"300","endLine":3,"endColumn":16},{"ruleId":"297","severity":1,"message":"343","line":28,"column":11,"nodeType":"299","messageId":"300","endLine":28,"endColumn":27},{"ruleId":"297","severity":1,"message":"336","line":4,"column":8,"nodeType":"299","messageId":"300","endLine":4,"endColumn":13},{"ruleId":"297","severity":1,"message":"327","line":2,"column":10,"nodeType":"299","messageId":"300","endLine":2,"endColumn":14},{"ruleId":"297","severity":1,"message":"340","line":4,"column":32,"nodeType":"299","messageId":"300","endLine":4,"endColumn":42},{"ruleId":"297","severity":1,"message":"314","line":11,"column":10,"nodeType":"299","messageId":"300","endLine":11,"endColumn":25},{"ruleId":"297","severity":1,"message":"344","line":12,"column":10,"nodeType":"299","messageId":"300","endLine":12,"endColumn":22},{"ruleId":"297","severity":1,"message":"345","line":14,"column":8,"nodeType":"299","messageId":"300","endLine":14,"endColumn":12},{"ruleId":"297","severity":1,"message":"346","line":21,"column":3,"nodeType":"299","messageId":"300","endLine":21,"endColumn":14},{"ruleId":"297","severity":1,"message":"347","line":2,"column":25,"nodeType":"299","messageId":"300","endLine":2,"endColumn":33},{"ruleId":"332","severity":1,"message":"333","line":172,"column":11,"nodeType":"326","endLine":172,"endColumn":70},{"ruleId":"297","severity":1,"message":"348","line":11,"column":10,"nodeType":"299","messageId":"300","endLine":11,"endColumn":17},{"ruleId":"297","severity":1,"message":"349","line":58,"column":11,"nodeType":"299","messageId":"300","endLine":58,"endColumn":17},{"ruleId":"301","severity":1,"message":"350","line":69,"column":6,"nodeType":"303","endLine":69,"endColumn":8,"suggestions":"351"},{"ruleId":"297","severity":1,"message":"352","line":115,"column":9,"nodeType":"299","messageId":"300","endLine":115,"endColumn":25},{"ruleId":"297","severity":1,"message":"353","line":1,"column":17,"nodeType":"299","messageId":"300","endLine":1,"endColumn":27},{"ruleId":"297","severity":1,"message":"354","line":2,"column":8,"nodeType":"299","messageId":"300","endLine":2,"endColumn":18},{"ruleId":"297","severity":1,"message":"345","line":16,"column":3,"nodeType":"299","messageId":"300","endLine":16,"endColumn":7},{"ruleId":"297","severity":1,"message":"355","line":36,"column":10,"nodeType":"299","messageId":"300","endLine":36,"endColumn":22},{"ruleId":"297","severity":1,"message":"356","line":36,"column":24,"nodeType":"299","messageId":"300","endLine":36,"endColumn":37},{"ruleId":"297","severity":1,"message":"357","line":176,"column":11,"nodeType":"299","messageId":"300","endLine":176,"endColumn":15},{"ruleId":"297","severity":1,"message":"357","line":182,"column":11,"nodeType":"299","messageId":"300","endLine":182,"endColumn":15},{"ruleId":"297","severity":1,"message":"357","line":69,"column":11,"nodeType":"299","messageId":"300","endLine":69,"endColumn":15},{"ruleId":"297","severity":1,"message":"341","line":96,"column":9,"nodeType":"299","messageId":"300","endLine":96,"endColumn":16},{"ruleId":"301","severity":1,"message":"334","line":147,"column":6,"nodeType":"303","endLine":147,"endColumn":18,"suggestions":"358"},{"ruleId":"297","severity":1,"message":"359","line":44,"column":10,"nodeType":"299","messageId":"300","endLine":44,"endColumn":16},{"ruleId":"297","severity":1,"message":"360","line":44,"column":18,"nodeType":"299","messageId":"300","endLine":44,"endColumn":27},{"ruleId":"297","severity":1,"message":"361","line":6,"column":3,"nodeType":"299","messageId":"300","endLine":6,"endColumn":14},{"ruleId":"297","severity":1,"message":"362","line":7,"column":3,"nodeType":"299","messageId":"300","endLine":7,"endColumn":13},{"ruleId":"297","severity":1,"message":"363","line":8,"column":3,"nodeType":"299","messageId":"300","endLine":8,"endColumn":9},{"ruleId":"297","severity":1,"message":"364","line":11,"column":3,"nodeType":"299","messageId":"300","endLine":11,"endColumn":11},{"ruleId":"297","severity":1,"message":"365","line":25,"column":22,"nodeType":"299","messageId":"300","endLine":25,"endColumn":32},{"ruleId":"297","severity":1,"message":"366","line":71,"column":10,"nodeType":"299","messageId":"300","endLine":71,"endColumn":17},{"ruleId":"297","severity":1,"message":"367","line":76,"column":9,"nodeType":"299","messageId":"300","endLine":76,"endColumn":26},{"ruleId":"332","severity":1,"message":"333","line":147,"column":17,"nodeType":"326","endLine":151,"endColumn":19},"no-native-reassign",["368"],"no-negated-in-lhs",["369"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["370"],"'postListAdded' is assigned a value but never used.","'postListRemoved' is assigned a value but never used.","'postListUpdated' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'makeStyles' is defined but never used.","'CircularProgress' is defined but never used.",["371"],"'FontAwesomeIcon' is defined but never used.","'faFilter' is defined but never used.","'userAuthID' is assigned a value but never used.","'setUserAuthID' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["372"],["373"],"'userPostRemoved' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'Link' is defined but never used.","'CssBaseline' is defined but never used.","'orgPhoto' is defined but never used.","'unknownUserPhoto' is defined but never used.","'checkPhoto' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["374"],"'axios' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Typography' is defined but never used.","'classes' is assigned a value but never used.","'faEdit' is defined but never used.","'handleEditButton' is assigned a value but never used.","'faPlusCircle' is defined but never used.","'Icon' is defined but never used.","'DialogTitle' is defined but never used.","'Redirect' is defined but never used.","'connect' is defined but never used.","'postId' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.",["375"],"'handleClickAlert' is assigned a value but never used.","'useContext' is defined but never used.","'DatePicker' is defined but never used.","'CodeOutlined' is defined but never used.","'LaptopWindows' is defined but never used.","'data' is assigned a value but never used.",["376"],"'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'withStyles' is defined but never used.","'orgList' is assigned a value but never used.","'handleGetUserPost' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"377","fix":"378"},{"desc":"377","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"384","fix":"388"},"Update the dependencies array to be: [props]",{"range":"389","text":"390"},{"range":"391","text":"390"},"Update the dependencies array to be: [props.history]",{"range":"392","text":"393"},"Update the dependencies array to be: [props, props.auth.token]",{"range":"394","text":"395"},"Update the dependencies array to be: [props.match.params.id, props.post]",{"range":"396","text":"397"},"Update the dependencies array to be: [_id]",{"range":"398","text":"399"},{"range":"400","text":"397"},[1436,1438],"[props]",[404,406],[674,676],"[props.history]",[804,822],"[props, props.auth.token]",[724,736],"[props.match.params.id, props.post]",[1807,1809],"[_id]",[3057,3069]]